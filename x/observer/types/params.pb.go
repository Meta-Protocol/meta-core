// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/observer/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/zeta-chain/zetacore/pkg/chains"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainParamsList struct {
	ChainParams []*ChainParams `protobuf:"bytes,1,rep,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
}

func (m *ChainParamsList) Reset()         { *m = ChainParamsList{} }
func (m *ChainParamsList) String() string { return proto.CompactTextString(m) }
func (*ChainParamsList) ProtoMessage()    {}
func (*ChainParamsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fa4666eddf88e5, []int{0}
}
func (m *ChainParamsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParamsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParamsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParamsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParamsList.Merge(m, src)
}
func (m *ChainParamsList) XXX_Size() int {
	return m.Size()
}
func (m *ChainParamsList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParamsList.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParamsList proto.InternalMessageInfo

func (m *ChainParamsList) GetChainParams() []*ChainParams {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

type ChainParams struct {
	ChainId                     int64                                  `protobuf:"varint,11,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConfirmationCount           uint64                                 `protobuf:"varint,1,opt,name=confirmation_count,json=confirmationCount,proto3" json:"confirmation_count,omitempty"`
	GasPriceTicker              uint64                                 `protobuf:"varint,2,opt,name=gas_price_ticker,json=gasPriceTicker,proto3" json:"gas_price_ticker,omitempty"`
	InboundTicker               uint64                                 `protobuf:"varint,3,opt,name=inbound_ticker,json=inboundTicker,proto3" json:"inbound_ticker,omitempty"`
	OutboundTicker              uint64                                 `protobuf:"varint,4,opt,name=outbound_ticker,json=outboundTicker,proto3" json:"outbound_ticker,omitempty"`
	WatchUtxoTicker             uint64                                 `protobuf:"varint,5,opt,name=watch_utxo_ticker,json=watchUtxoTicker,proto3" json:"watch_utxo_ticker,omitempty"`
	ZetaTokenContractAddress    string                                 `protobuf:"bytes,8,opt,name=zeta_token_contract_address,json=zetaTokenContractAddress,proto3" json:"zeta_token_contract_address,omitempty"`
	ConnectorContractAddress    string                                 `protobuf:"bytes,9,opt,name=connector_contract_address,json=connectorContractAddress,proto3" json:"connector_contract_address,omitempty"`
	Erc20CustodyContractAddress string                                 `protobuf:"bytes,10,opt,name=erc20_custody_contract_address,json=erc20CustodyContractAddress,proto3" json:"erc20_custody_contract_address,omitempty"`
	OutboundScheduleInterval    int64                                  `protobuf:"varint,12,opt,name=outbound_schedule_interval,json=outboundScheduleInterval,proto3" json:"outbound_schedule_interval,omitempty"`
	OutboundScheduleLookahead   int64                                  `protobuf:"varint,13,opt,name=outbound_schedule_lookahead,json=outboundScheduleLookahead,proto3" json:"outbound_schedule_lookahead,omitempty"`
	BallotThreshold             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=ballot_threshold,json=ballotThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ballot_threshold"`
	MinObserverDelegation       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=min_observer_delegation,json=minObserverDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_observer_delegation"`
	IsSupported                 bool                                   `protobuf:"varint,16,opt,name=is_supported,json=isSupported,proto3" json:"is_supported,omitempty"`
}

func (m *ChainParams) Reset()         { *m = ChainParams{} }
func (m *ChainParams) String() string { return proto.CompactTextString(m) }
func (*ChainParams) ProtoMessage()    {}
func (*ChainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fa4666eddf88e5, []int{1}
}
func (m *ChainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParams.Merge(m, src)
}
func (m *ChainParams) XXX_Size() int {
	return m.Size()
}
func (m *ChainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParams.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParams proto.InternalMessageInfo

func (m *ChainParams) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainParams) GetConfirmationCount() uint64 {
	if m != nil {
		return m.ConfirmationCount
	}
	return 0
}

func (m *ChainParams) GetGasPriceTicker() uint64 {
	if m != nil {
		return m.GasPriceTicker
	}
	return 0
}

func (m *ChainParams) GetInboundTicker() uint64 {
	if m != nil {
		return m.InboundTicker
	}
	return 0
}

func (m *ChainParams) GetOutboundTicker() uint64 {
	if m != nil {
		return m.OutboundTicker
	}
	return 0
}

func (m *ChainParams) GetWatchUtxoTicker() uint64 {
	if m != nil {
		return m.WatchUtxoTicker
	}
	return 0
}

func (m *ChainParams) GetZetaTokenContractAddress() string {
	if m != nil {
		return m.ZetaTokenContractAddress
	}
	return ""
}

func (m *ChainParams) GetConnectorContractAddress() string {
	if m != nil {
		return m.ConnectorContractAddress
	}
	return ""
}

func (m *ChainParams) GetErc20CustodyContractAddress() string {
	if m != nil {
		return m.Erc20CustodyContractAddress
	}
	return ""
}

func (m *ChainParams) GetOutboundScheduleInterval() int64 {
	if m != nil {
		return m.OutboundScheduleInterval
	}
	return 0
}

func (m *ChainParams) GetOutboundScheduleLookahead() int64 {
	if m != nil {
		return m.OutboundScheduleLookahead
	}
	return 0
}

func (m *ChainParams) GetIsSupported() bool {
	if m != nil {
		return m.IsSupported
	}
	return false
}

// Deprecated(v17)
type Params struct {
	// Deprecated(v17):Moved into the emissions module
	BallotMaturityBlocks int64 `protobuf:"varint,3,opt,name=ballot_maturity_blocks,json=ballotMaturityBlocks,proto3" json:"ballot_maturity_blocks,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fa4666eddf88e5, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBallotMaturityBlocks() int64 {
	if m != nil {
		return m.BallotMaturityBlocks
	}
	return 0
}

func init() {
	proto.RegisterType((*ChainParamsList)(nil), "zetachain.zetacore.observer.ChainParamsList")
	proto.RegisterType((*ChainParams)(nil), "zetachain.zetacore.observer.ChainParams")
	proto.RegisterType((*Params)(nil), "zetachain.zetacore.observer.Params")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/observer/params.proto", fileDescriptor_e7fa4666eddf88e5)
}

var fileDescriptor_e7fa4666eddf88e5 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x4e, 0xd4, 0x40,
	0x18, 0xc7, 0xb7, 0x2e, 0x22, 0xcc, 0x02, 0x0b, 0x0d, 0x6a, 0x81, 0xa4, 0xac, 0x24, 0x6a, 0x43,
	0x42, 0x6b, 0xd0, 0xa3, 0x92, 0xc8, 0x72, 0x21, 0x62, 0x24, 0x05, 0x0f, 0x7a, 0x70, 0x32, 0x3b,
	0x1d, 0xda, 0xc9, 0xb6, 0xfd, 0x9a, 0x99, 0x29, 0x82, 0x4f, 0xe1, 0x3b, 0xf8, 0x32, 0x1c, 0x39,
	0x1a, 0x0f, 0xc4, 0xc0, 0x8b, 0x98, 0x4e, 0xa7, 0xcb, 0x0a, 0x86, 0x83, 0xa7, 0xce, 0x7c, 0xff,
	0xdf, 0xff, 0xbf, 0xdf, 0x6c, 0xbf, 0x0e, 0xf2, 0xbe, 0x31, 0x45, 0x68, 0x42, 0x78, 0x1e, 0xe8,
	0x15, 0x08, 0x16, 0xc0, 0x40, 0x32, 0x71, 0xcc, 0x44, 0x50, 0x10, 0x41, 0x32, 0xe9, 0x17, 0x02,
	0x14, 0xd8, 0x2b, 0x23, 0xd2, 0x6f, 0x48, 0xbf, 0x21, 0x97, 0x17, 0x63, 0x88, 0x41, 0x73, 0x41,
	0xb5, 0xaa, 0x2d, 0xcb, 0xeb, 0x77, 0x85, 0x37, 0x8b, 0x3b, 0xd8, 0x62, 0x18, 0x07, 0xba, 0x24,
	0xcd, 0xa3, 0x66, 0xd7, 0xbe, 0xa0, 0x6e, 0xbf, 0xda, 0xef, 0xeb, 0xfe, 0xf6, 0xb8, 0x54, 0xf6,
	0x3b, 0x34, 0xa3, 0x11, 0x5c, 0xf7, 0xec, 0x58, 0xbd, 0xb6, 0xd7, 0xd9, 0xf4, 0xfc, 0x3b, 0x9a,
	0xf6, 0xc7, 0x32, 0xc2, 0x0e, 0xbd, 0xde, 0xac, 0xfd, 0x98, 0x44, 0x9d, 0x31, 0xd1, 0x5e, 0x42,
	0x53, 0x75, 0x38, 0x8f, 0x9c, 0x4e, 0xcf, 0xf2, 0xda, 0xe1, 0x03, 0xbd, 0xdf, 0x8d, 0xec, 0x0d,
	0x64, 0x53, 0xc8, 0x8f, 0xb8, 0xc8, 0x88, 0xe2, 0x90, 0x63, 0x0a, 0x65, 0xae, 0x1c, 0xab, 0x67,
	0x79, 0x13, 0xe1, 0xc2, 0xb8, 0xd2, 0xaf, 0x04, 0xdb, 0x43, 0xf3, 0x31, 0x91, 0xb8, 0x10, 0x9c,
	0x32, 0xac, 0x38, 0x1d, 0x32, 0xe1, 0xdc, 0xd3, 0xf0, 0x5c, 0x4c, 0xe4, 0x7e, 0x55, 0x3e, 0xd4,
	0x55, 0xfb, 0x29, 0x9a, 0xe3, 0xf9, 0x00, 0xca, 0x3c, 0x6a, 0xb8, 0xb6, 0xe6, 0x66, 0x4d, 0xd5,
	0x60, 0xcf, 0x51, 0x17, 0x4a, 0xf5, 0x17, 0x37, 0x51, 0xe7, 0x35, 0x65, 0x03, 0xae, 0xa3, 0x85,
	0xaf, 0x44, 0xd1, 0x04, 0x97, 0xea, 0x04, 0x1a, 0xf4, 0xbe, 0x46, 0xbb, 0x5a, 0xf8, 0xa8, 0x4e,
	0xc0, 0xb0, 0x6f, 0x90, 0x7e, 0xd9, 0x58, 0xc1, 0x90, 0x55, 0x47, 0xca, 0x95, 0x20, 0x54, 0x61,
	0x12, 0x45, 0x82, 0x49, 0xe9, 0x4c, 0xf5, 0x2c, 0x6f, 0x3a, 0x74, 0x2a, 0xe4, 0xb0, 0x22, 0xfa,
	0x06, 0x78, 0x5b, 0xeb, 0xf6, 0x6b, 0xb4, 0x4c, 0x21, 0xcf, 0x19, 0x55, 0x20, 0x6e, 0xbb, 0xa7,
	0x6b, 0xf7, 0x88, 0xb8, 0xe9, 0xee, 0x23, 0x97, 0x09, 0xba, 0xf9, 0x02, 0xd3, 0x52, 0x2a, 0x88,
	0x4e, 0x6f, 0x27, 0x20, 0x9d, 0xb0, 0xa2, 0xa9, 0x7e, 0x0d, 0xfd, 0xa3, 0x85, 0xd1, 0xdf, 0x22,
	0x69, 0xc2, 0xa2, 0x32, 0x65, 0x98, 0xe7, 0x8a, 0x89, 0x63, 0x92, 0x3a, 0x33, 0xfa, 0x1d, 0x3a,
	0x0d, 0x71, 0x60, 0x80, 0x5d, 0xa3, 0xdb, 0x5b, 0x68, 0xe5, 0xb6, 0x3b, 0x05, 0x18, 0x92, 0x84,
	0x91, 0xc8, 0x99, 0xd5, 0xf6, 0xa5, 0x9b, 0xf6, 0xbd, 0x06, 0xb0, 0x3f, 0xa1, 0xf9, 0x01, 0x49,
	0x53, 0x50, 0x58, 0x25, 0x82, 0xc9, 0x04, 0xd2, 0xc8, 0x99, 0xab, 0x9a, 0xde, 0xf6, 0xcf, 0x2e,
	0x56, 0x5b, 0xbf, 0x2e, 0x56, 0x9f, 0xc5, 0x5c, 0x25, 0xe5, 0xc0, 0xa7, 0x90, 0x05, 0x14, 0x64,
	0x06, 0xd2, 0x3c, 0x36, 0x64, 0x34, 0x0c, 0xd4, 0x69, 0xc1, 0xa4, 0xbf, 0xc3, 0x68, 0xd8, 0xad,
	0x73, 0x0e, 0x9b, 0x18, 0xfb, 0x08, 0x3d, 0xce, 0x78, 0x8e, 0x9b, 0x19, 0xc6, 0x11, 0x4b, 0x59,
	0xac, 0x07, 0xcc, 0xe9, 0xfe, 0xd7, 0x2f, 0x3c, 0xcc, 0x78, 0xfe, 0xc1, 0xa4, 0xed, 0x8c, 0xc2,
	0xec, 0x27, 0x68, 0x86, 0x4b, 0x2c, 0xcb, 0xa2, 0x00, 0xa1, 0x58, 0xe4, 0xcc, 0xf7, 0x2c, 0x6f,
	0x2a, 0xec, 0x70, 0x79, 0xd0, 0x94, 0xd6, 0xb6, 0xd0, 0xa4, 0xf9, 0x3e, 0x5e, 0xa1, 0x47, 0xe6,
	0xbc, 0x19, 0x51, 0xa5, 0xe0, 0xea, 0x14, 0x0f, 0x52, 0xa0, 0x43, 0xa9, 0x67, 0xb6, 0x1d, 0x2e,
	0xd6, 0xea, 0x7b, 0x23, 0x6e, 0x6b, 0x6d, 0x7b, 0xf7, 0xec, 0xd2, 0xb5, 0xce, 0x2f, 0x5d, 0xeb,
	0xf7, 0xa5, 0x6b, 0x7d, 0xbf, 0x72, 0x5b, 0xe7, 0x57, 0x6e, 0xeb, 0xe7, 0x95, 0xdb, 0xfa, 0x1c,
	0x8c, 0xf5, 0x5e, 0x4d, 0xd9, 0xc6, 0x8d, 0x7b, 0xe1, 0xe4, 0xfa, 0x16, 0xd1, 0x07, 0x19, 0x4c,
	0xea, 0x7b, 0xe1, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x11, 0xb3, 0xd5, 0xce, 0x04,
	0x00, 0x00,
}

func (m *ChainParamsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParamsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParamsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainParams) > 0 {
		for iNdEx := len(m.ChainParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSupported {
		i--
		if m.IsSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size := m.MinObserverDelegation.Size()
		i -= size
		if _, err := m.MinObserverDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.BallotThreshold.Size()
		i -= size
		if _, err := m.BallotThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.OutboundScheduleLookahead != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OutboundScheduleLookahead))
		i--
		dAtA[i] = 0x68
	}
	if m.OutboundScheduleInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OutboundScheduleInterval))
		i--
		dAtA[i] = 0x60
	}
	if m.ChainId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Erc20CustodyContractAddress) > 0 {
		i -= len(m.Erc20CustodyContractAddress)
		copy(dAtA[i:], m.Erc20CustodyContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Erc20CustodyContractAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ConnectorContractAddress) > 0 {
		i -= len(m.ConnectorContractAddress)
		copy(dAtA[i:], m.ConnectorContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ConnectorContractAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ZetaTokenContractAddress) > 0 {
		i -= len(m.ZetaTokenContractAddress)
		copy(dAtA[i:], m.ZetaTokenContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ZetaTokenContractAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.WatchUtxoTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WatchUtxoTicker))
		i--
		dAtA[i] = 0x28
	}
	if m.OutboundTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OutboundTicker))
		i--
		dAtA[i] = 0x20
	}
	if m.InboundTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.InboundTicker))
		i--
		dAtA[i] = 0x18
	}
	if m.GasPriceTicker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GasPriceTicker))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfirmationCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ConfirmationCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BallotMaturityBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BallotMaturityBlocks))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainParamsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainParams) > 0 {
		for _, e := range m.ChainParams {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *ChainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfirmationCount != 0 {
		n += 1 + sovParams(uint64(m.ConfirmationCount))
	}
	if m.GasPriceTicker != 0 {
		n += 1 + sovParams(uint64(m.GasPriceTicker))
	}
	if m.InboundTicker != 0 {
		n += 1 + sovParams(uint64(m.InboundTicker))
	}
	if m.OutboundTicker != 0 {
		n += 1 + sovParams(uint64(m.OutboundTicker))
	}
	if m.WatchUtxoTicker != 0 {
		n += 1 + sovParams(uint64(m.WatchUtxoTicker))
	}
	l = len(m.ZetaTokenContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ConnectorContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Erc20CustodyContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovParams(uint64(m.ChainId))
	}
	if m.OutboundScheduleInterval != 0 {
		n += 1 + sovParams(uint64(m.OutboundScheduleInterval))
	}
	if m.OutboundScheduleLookahead != 0 {
		n += 1 + sovParams(uint64(m.OutboundScheduleLookahead))
	}
	l = m.BallotThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinObserverDelegation.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.IsSupported {
		n += 3
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BallotMaturityBlocks != 0 {
		n += 1 + sovParams(uint64(m.BallotMaturityBlocks))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainParamsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParamsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParamsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainParams = append(m.ChainParams, &ChainParams{})
			if err := m.ChainParams[len(m.ChainParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationCount", wireType)
			}
			m.ConfirmationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPriceTicker", wireType)
			}
			m.GasPriceTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPriceTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTicker", wireType)
			}
			m.InboundTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTicker", wireType)
			}
			m.OutboundTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchUtxoTicker", wireType)
			}
			m.WatchUtxoTicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchUtxoTicker |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaTokenContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZetaTokenContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectorContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20CustodyContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20CustodyContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundScheduleInterval", wireType)
			}
			m.OutboundScheduleInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundScheduleInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundScheduleLookahead", wireType)
			}
			m.OutboundScheduleLookahead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundScheduleLookahead |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BallotThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinObserverDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinObserverDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotMaturityBlocks", wireType)
			}
			m.BallotMaturityBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallotMaturityBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
