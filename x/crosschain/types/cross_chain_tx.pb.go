// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/crosschain/cross_chain_tx.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	coin "github.com/zeta-chain/node/pkg/coin"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CctxStatus int32

const (
	CctxStatus_PendingInbound  CctxStatus = 0
	CctxStatus_PendingOutbound CctxStatus = 1
	CctxStatus_OutboundMined   CctxStatus = 3
	CctxStatus_PendingRevert   CctxStatus = 4
	CctxStatus_Reverted        CctxStatus = 5
	CctxStatus_Aborted         CctxStatus = 6
)

var CctxStatus_name = map[int32]string{
	0: "PendingInbound",
	1: "PendingOutbound",
	3: "OutboundMined",
	4: "PendingRevert",
	5: "Reverted",
	6: "Aborted",
}

var CctxStatus_value = map[string]int32{
	"PendingInbound":  0,
	"PendingOutbound": 1,
	"OutboundMined":   3,
	"PendingRevert":   4,
	"Reverted":        5,
	"Aborted":         6,
}

func (x CctxStatus) String() string {
	return proto.EnumName(CctxStatus_name, int32(x))
}

func (CctxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{0}
}

type TxFinalizationStatus int32

const (
	TxFinalizationStatus_NotFinalized TxFinalizationStatus = 0
	TxFinalizationStatus_Finalized    TxFinalizationStatus = 1
	TxFinalizationStatus_Executed     TxFinalizationStatus = 2
)

var TxFinalizationStatus_name = map[int32]string{
	0: "NotFinalized",
	1: "Finalized",
	2: "Executed",
}

var TxFinalizationStatus_value = map[string]int32{
	"NotFinalized": 0,
	"Finalized":    1,
	"Executed":     2,
}

func (x TxFinalizationStatus) String() string {
	return proto.EnumName(TxFinalizationStatus_name, int32(x))
}

func (TxFinalizationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{1}
}

// ProtocolContractVersion represents the version of the protocol contract used
// for cctx workflow
type ProtocolContractVersion int32

const (
	ProtocolContractVersion_V1 ProtocolContractVersion = 0
	ProtocolContractVersion_V2 ProtocolContractVersion = 1
)

var ProtocolContractVersion_name = map[int32]string{
	0: "V1",
	1: "V2",
}

var ProtocolContractVersion_value = map[string]int32{
	"V1": 0,
	"V2": 1,
}

func (x ProtocolContractVersion) String() string {
	return proto.EnumName(ProtocolContractVersion_name, int32(x))
}

func (ProtocolContractVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{2}
}

type InboundParams struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// the Connector.send()
	SenderChainId          int64                                   `protobuf:"varint,2,opt,name=sender_chain_id,json=senderChainId,proto3" json:"sender_chain_id,omitempty"`
	TxOrigin               string                                  `protobuf:"bytes,3,opt,name=tx_origin,json=txOrigin,proto3" json:"tx_origin,omitempty"`
	CoinType               coin.CoinType                           `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	Asset                  string                                  `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount                 github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	ObservedHash           string                                  `protobuf:"bytes,7,opt,name=observed_hash,json=observedHash,proto3" json:"observed_hash,omitempty"`
	ObservedExternalHeight uint64                                  `protobuf:"varint,8,opt,name=observed_external_height,json=observedExternalHeight,proto3" json:"observed_external_height,omitempty"`
	BallotIndex            string                                  `protobuf:"bytes,9,opt,name=ballot_index,json=ballotIndex,proto3" json:"ballot_index,omitempty"`
	FinalizedZetaHeight    uint64                                  `protobuf:"varint,10,opt,name=finalized_zeta_height,json=finalizedZetaHeight,proto3" json:"finalized_zeta_height,omitempty"`
	TxFinalizationStatus   TxFinalizationStatus                    `protobuf:"varint,11,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=zetachain.zetacore.crosschain.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
	// this field describes if a smart contract call should be made for a inbound
	// with assets only used for protocol contract version 2
	IsCrossChainCall bool `protobuf:"varint,12,opt,name=is_cross_chain_call,json=isCrossChainCall,proto3" json:"is_cross_chain_call,omitempty"`
}

func (m *InboundParams) Reset()         { *m = InboundParams{} }
func (m *InboundParams) String() string { return proto.CompactTextString(m) }
func (*InboundParams) ProtoMessage()    {}
func (*InboundParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{0}
}
func (m *InboundParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundParams.Merge(m, src)
}
func (m *InboundParams) XXX_Size() int {
	return m.Size()
}
func (m *InboundParams) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundParams.DiscardUnknown(m)
}

var xxx_messageInfo_InboundParams proto.InternalMessageInfo

func (m *InboundParams) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InboundParams) GetSenderChainId() int64 {
	if m != nil {
		return m.SenderChainId
	}
	return 0
}

func (m *InboundParams) GetTxOrigin() string {
	if m != nil {
		return m.TxOrigin
	}
	return ""
}

func (m *InboundParams) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func (m *InboundParams) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *InboundParams) GetObservedHash() string {
	if m != nil {
		return m.ObservedHash
	}
	return ""
}

func (m *InboundParams) GetObservedExternalHeight() uint64 {
	if m != nil {
		return m.ObservedExternalHeight
	}
	return 0
}

func (m *InboundParams) GetBallotIndex() string {
	if m != nil {
		return m.BallotIndex
	}
	return ""
}

func (m *InboundParams) GetFinalizedZetaHeight() uint64 {
	if m != nil {
		return m.FinalizedZetaHeight
	}
	return 0
}

func (m *InboundParams) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NotFinalized
}

func (m *InboundParams) GetIsCrossChainCall() bool {
	if m != nil {
		return m.IsCrossChainCall
	}
	return false
}

type ZetaAccounting struct {
	// aborted_zeta_amount stores the total aborted amount for cctx of coin-type
	// ZETA
	AbortedZetaAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=aborted_zeta_amount,json=abortedZetaAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"aborted_zeta_amount"`
}

func (m *ZetaAccounting) Reset()         { *m = ZetaAccounting{} }
func (m *ZetaAccounting) String() string { return proto.CompactTextString(m) }
func (*ZetaAccounting) ProtoMessage()    {}
func (*ZetaAccounting) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{1}
}
func (m *ZetaAccounting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZetaAccounting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZetaAccounting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZetaAccounting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZetaAccounting.Merge(m, src)
}
func (m *ZetaAccounting) XXX_Size() int {
	return m.Size()
}
func (m *ZetaAccounting) XXX_DiscardUnknown() {
	xxx_messageInfo_ZetaAccounting.DiscardUnknown(m)
}

var xxx_messageInfo_ZetaAccounting proto.InternalMessageInfo

type CallOptions struct {
	GasLimit        uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	IsArbitraryCall bool   `protobuf:"varint,2,opt,name=is_arbitrary_call,json=isArbitraryCall,proto3" json:"is_arbitrary_call,omitempty"`
}

func (m *CallOptions) Reset()         { *m = CallOptions{} }
func (m *CallOptions) String() string { return proto.CompactTextString(m) }
func (*CallOptions) ProtoMessage()    {}
func (*CallOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{2}
}
func (m *CallOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallOptions.Merge(m, src)
}
func (m *CallOptions) XXX_Size() int {
	return m.Size()
}
func (m *CallOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CallOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CallOptions proto.InternalMessageInfo

func (m *CallOptions) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *CallOptions) GetIsArbitraryCall() bool {
	if m != nil {
		return m.IsArbitraryCall
	}
	return false
}

type OutboundParams struct {
	Receiver        string                                  `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChainId int64                                   `protobuf:"varint,2,opt,name=receiver_chain_id,json=receiverChainId,proto3" json:"receiver_chain_id,omitempty"`
	CoinType        coin.CoinType                           `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	TssNonce        uint64                                  `protobuf:"varint,5,opt,name=tss_nonce,json=tssNonce,proto3" json:"tss_nonce,omitempty"`
	// Deprecated (v21), use CallOptions
	GasLimit       uint64 `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasPrice       string `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasPriorityFee string `protobuf:"bytes,23,opt,name=gas_priority_fee,json=gasPriorityFee,proto3" json:"gas_priority_fee,omitempty"`
	// the above are commands for zetaclients
	// the following fields are used when the outbound tx is mined
	Hash                   string                                 `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	BallotIndex            string                                 `protobuf:"bytes,9,opt,name=ballot_index,json=ballotIndex,proto3" json:"ballot_index,omitempty"`
	ObservedExternalHeight uint64                                 `protobuf:"varint,10,opt,name=observed_external_height,json=observedExternalHeight,proto3" json:"observed_external_height,omitempty"`
	GasUsed                uint64                                 `protobuf:"varint,20,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	EffectiveGasPrice      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,21,opt,name=effective_gas_price,json=effectiveGasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"effective_gas_price"`
	EffectiveGasLimit      uint64                                 `protobuf:"varint,22,opt,name=effective_gas_limit,json=effectiveGasLimit,proto3" json:"effective_gas_limit,omitempty"`
	TssPubkey              string                                 `protobuf:"bytes,11,opt,name=tss_pubkey,json=tssPubkey,proto3" json:"tss_pubkey,omitempty"`
	TxFinalizationStatus   TxFinalizationStatus                   `protobuf:"varint,12,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=zetachain.zetacore.crosschain.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
	CallOptions            *CallOptions                           `protobuf:"bytes,24,opt,name=call_options,json=callOptions,proto3" json:"call_options,omitempty"`
}

func (m *OutboundParams) Reset()         { *m = OutboundParams{} }
func (m *OutboundParams) String() string { return proto.CompactTextString(m) }
func (*OutboundParams) ProtoMessage()    {}
func (*OutboundParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{3}
}
func (m *OutboundParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundParams.Merge(m, src)
}
func (m *OutboundParams) XXX_Size() int {
	return m.Size()
}
func (m *OutboundParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundParams.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundParams proto.InternalMessageInfo

func (m *OutboundParams) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *OutboundParams) GetReceiverChainId() int64 {
	if m != nil {
		return m.ReceiverChainId
	}
	return 0
}

func (m *OutboundParams) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func (m *OutboundParams) GetTssNonce() uint64 {
	if m != nil {
		return m.TssNonce
	}
	return 0
}

func (m *OutboundParams) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *OutboundParams) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *OutboundParams) GetGasPriorityFee() string {
	if m != nil {
		return m.GasPriorityFee
	}
	return ""
}

func (m *OutboundParams) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *OutboundParams) GetBallotIndex() string {
	if m != nil {
		return m.BallotIndex
	}
	return ""
}

func (m *OutboundParams) GetObservedExternalHeight() uint64 {
	if m != nil {
		return m.ObservedExternalHeight
	}
	return 0
}

func (m *OutboundParams) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *OutboundParams) GetEffectiveGasLimit() uint64 {
	if m != nil {
		return m.EffectiveGasLimit
	}
	return 0
}

func (m *OutboundParams) GetTssPubkey() string {
	if m != nil {
		return m.TssPubkey
	}
	return ""
}

func (m *OutboundParams) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NotFinalized
}

func (m *OutboundParams) GetCallOptions() *CallOptions {
	if m != nil {
		return m.CallOptions
	}
	return nil
}

type Status struct {
	Status CctxStatus `protobuf:"varint,1,opt,name=status,proto3,enum=zetachain.zetacore.crosschain.CctxStatus" json:"status,omitempty"`
	// status_message carries information about the status transitions:
	// why they were triggered, old and new status.
	StatusMessage string `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// error_message carries information about the error that caused the tx
	// to be PendingRevert, Reverted or Aborted.
	ErrorMessage        string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	LastUpdateTimestamp int64  `protobuf:"varint,3,opt,name=lastUpdate_timestamp,json=lastUpdateTimestamp,proto3" json:"lastUpdate_timestamp,omitempty"`
	IsAbortRefunded     bool   `protobuf:"varint,4,opt,name=isAbortRefunded,proto3" json:"isAbortRefunded,omitempty"`
	// when the CCTX was created. only populated on new transactions.
	CreatedTimestamp int64 `protobuf:"varint,5,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{4}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() CctxStatus {
	if m != nil {
		return m.Status
	}
	return CctxStatus_PendingInbound
}

func (m *Status) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *Status) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *Status) GetLastUpdateTimestamp() int64 {
	if m != nil {
		return m.LastUpdateTimestamp
	}
	return 0
}

func (m *Status) GetIsAbortRefunded() bool {
	if m != nil {
		return m.IsAbortRefunded
	}
	return false
}

func (m *Status) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

// RevertOptions represents the options for reverting a cctx
type RevertOptions struct {
	RevertAddress  string                                  `protobuf:"bytes,1,opt,name=revert_address,json=revertAddress,proto3" json:"revert_address,omitempty"`
	CallOnRevert   bool                                    `protobuf:"varint,2,opt,name=call_on_revert,json=callOnRevert,proto3" json:"call_on_revert,omitempty"`
	AbortAddress   string                                  `protobuf:"bytes,3,opt,name=abort_address,json=abortAddress,proto3" json:"abort_address,omitempty"`
	RevertMessage  []byte                                  `protobuf:"bytes,4,opt,name=revert_message,json=revertMessage,proto3" json:"revert_message,omitempty"`
	RevertGasLimit github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=revert_gas_limit,json=revertGasLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"revert_gas_limit"`
}

func (m *RevertOptions) Reset()         { *m = RevertOptions{} }
func (m *RevertOptions) String() string { return proto.CompactTextString(m) }
func (*RevertOptions) ProtoMessage()    {}
func (*RevertOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{5}
}
func (m *RevertOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevertOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevertOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevertOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevertOptions.Merge(m, src)
}
func (m *RevertOptions) XXX_Size() int {
	return m.Size()
}
func (m *RevertOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RevertOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RevertOptions proto.InternalMessageInfo

func (m *RevertOptions) GetRevertAddress() string {
	if m != nil {
		return m.RevertAddress
	}
	return ""
}

func (m *RevertOptions) GetCallOnRevert() bool {
	if m != nil {
		return m.CallOnRevert
	}
	return false
}

func (m *RevertOptions) GetAbortAddress() string {
	if m != nil {
		return m.AbortAddress
	}
	return ""
}

func (m *RevertOptions) GetRevertMessage() []byte {
	if m != nil {
		return m.RevertMessage
	}
	return nil
}

type CrossChainTx struct {
	Creator                 string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index                   string                                  `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ZetaFees                github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=zeta_fees,json=zetaFees,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"zeta_fees" yaml:"zeta_fees"`
	RelayedMessage          string                                  `protobuf:"bytes,6,opt,name=relayed_message,json=relayedMessage,proto3" json:"relayed_message,omitempty"`
	CctxStatus              *Status                                 `protobuf:"bytes,8,opt,name=cctx_status,json=cctxStatus,proto3" json:"cctx_status,omitempty"`
	InboundParams           *InboundParams                          `protobuf:"bytes,9,opt,name=inbound_params,json=inboundParams,proto3" json:"inbound_params,omitempty"`
	OutboundParams          []*OutboundParams                       `protobuf:"bytes,10,rep,name=outbound_params,json=outboundParams,proto3" json:"outbound_params,omitempty"`
	ProtocolContractVersion ProtocolContractVersion                 `protobuf:"varint,11,opt,name=protocol_contract_version,json=protocolContractVersion,proto3,enum=zetachain.zetacore.crosschain.ProtocolContractVersion" json:"protocol_contract_version,omitempty"`
	RevertOptions           RevertOptions                           `protobuf:"bytes,12,opt,name=revert_options,json=revertOptions,proto3" json:"revert_options"`
}

func (m *CrossChainTx) Reset()         { *m = CrossChainTx{} }
func (m *CrossChainTx) String() string { return proto.CompactTextString(m) }
func (*CrossChainTx) ProtoMessage()    {}
func (*CrossChainTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4c1966807fb5cb2, []int{6}
}
func (m *CrossChainTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTx.Merge(m, src)
}
func (m *CrossChainTx) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTx.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTx proto.InternalMessageInfo

func (m *CrossChainTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CrossChainTx) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CrossChainTx) GetRelayedMessage() string {
	if m != nil {
		return m.RelayedMessage
	}
	return ""
}

func (m *CrossChainTx) GetCctxStatus() *Status {
	if m != nil {
		return m.CctxStatus
	}
	return nil
}

func (m *CrossChainTx) GetInboundParams() *InboundParams {
	if m != nil {
		return m.InboundParams
	}
	return nil
}

func (m *CrossChainTx) GetOutboundParams() []*OutboundParams {
	if m != nil {
		return m.OutboundParams
	}
	return nil
}

func (m *CrossChainTx) GetProtocolContractVersion() ProtocolContractVersion {
	if m != nil {
		return m.ProtocolContractVersion
	}
	return ProtocolContractVersion_V1
}

func (m *CrossChainTx) GetRevertOptions() RevertOptions {
	if m != nil {
		return m.RevertOptions
	}
	return RevertOptions{}
}

func init() {
	proto.RegisterEnum("zetachain.zetacore.crosschain.CctxStatus", CctxStatus_name, CctxStatus_value)
	proto.RegisterEnum("zetachain.zetacore.crosschain.TxFinalizationStatus", TxFinalizationStatus_name, TxFinalizationStatus_value)
	proto.RegisterEnum("zetachain.zetacore.crosschain.ProtocolContractVersion", ProtocolContractVersion_name, ProtocolContractVersion_value)
	proto.RegisterType((*InboundParams)(nil), "zetachain.zetacore.crosschain.InboundParams")
	proto.RegisterType((*ZetaAccounting)(nil), "zetachain.zetacore.crosschain.ZetaAccounting")
	proto.RegisterType((*CallOptions)(nil), "zetachain.zetacore.crosschain.CallOptions")
	proto.RegisterType((*OutboundParams)(nil), "zetachain.zetacore.crosschain.OutboundParams")
	proto.RegisterType((*Status)(nil), "zetachain.zetacore.crosschain.Status")
	proto.RegisterType((*RevertOptions)(nil), "zetachain.zetacore.crosschain.RevertOptions")
	proto.RegisterType((*CrossChainTx)(nil), "zetachain.zetacore.crosschain.CrossChainTx")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/crosschain/cross_chain_tx.proto", fileDescriptor_d4c1966807fb5cb2)
}

var fileDescriptor_d4c1966807fb5cb2 = []byte{
	// 1374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x6f, 0x1b, 0x37,
	0x13, 0xf6, 0xda, 0xb2, 0x2c, 0x8d, 0x3e, 0xbc, 0xa6, 0x15, 0x67, 0xe3, 0x17, 0x51, 0xf4, 0xea,
	0x7d, 0x9d, 0xa8, 0x6e, 0x2d, 0x21, 0x0a, 0x50, 0x14, 0xbd, 0xd9, 0x46, 0x9c, 0xb8, 0x6d, 0x62,
	0x63, 0xe3, 0x18, 0x48, 0x0e, 0xdd, 0x52, 0xbb, 0xb4, 0x44, 0x58, 0x5a, 0xaa, 0x4b, 0xca, 0x90,
	0x82, 0xde, 0x7a, 0x2e, 0xd0, 0xbf, 0x50, 0xa0, 0x87, 0xfe, 0x94, 0x1c, 0x73, 0x2c, 0x7a, 0x48,
	0xdb, 0xe4, 0x1f, 0xf4, 0x17, 0x14, 0xfc, 0xd2, 0x87, 0xe1, 0xda, 0x69, 0xda, 0x93, 0x38, 0x33,
	0x9c, 0x67, 0x66, 0x87, 0xf3, 0x0c, 0x29, 0x68, 0xbe, 0x20, 0x02, 0x87, 0x1d, 0x4c, 0xe3, 0x86,
	0x5a, 0xb1, 0x84, 0x34, 0xc2, 0x84, 0x71, 0xae, 0x75, 0x6a, 0x19, 0xa8, 0x75, 0x20, 0x86, 0xf5,
	0x7e, 0xc2, 0x04, 0x43, 0x37, 0xc7, 0x3e, 0x75, 0xeb, 0x53, 0x9f, 0xf8, 0xac, 0x97, 0xda, 0xac,
	0xcd, 0xd4, 0xce, 0x86, 0x5c, 0x69, 0xa7, 0xf5, 0xdb, 0x17, 0x04, 0xea, 0x9f, 0xb6, 0x1b, 0x21,
	0x93, 0x61, 0x18, 0x8d, 0xf5, 0xbe, 0xea, 0xaf, 0x29, 0x28, 0xec, 0xc7, 0x2d, 0x36, 0x88, 0xa3,
	0x43, 0x9c, 0xe0, 0x1e, 0x47, 0x6b, 0x90, 0xe6, 0x24, 0x8e, 0x48, 0xe2, 0x39, 0x15, 0xa7, 0x96,
	0xf5, 0x8d, 0x84, 0x6e, 0xc3, 0xb2, 0x5e, 0x99, 0xfc, 0x68, 0xe4, 0xcd, 0x57, 0x9c, 0xda, 0x82,
	0x5f, 0xd0, 0xea, 0x5d, 0xa9, 0xdd, 0x8f, 0xd0, 0x7f, 0x20, 0x2b, 0x86, 0x01, 0x4b, 0x68, 0x9b,
	0xc6, 0xde, 0x82, 0x82, 0xc8, 0x88, 0xe1, 0x81, 0x92, 0xd1, 0x0e, 0x64, 0x65, 0xf0, 0x40, 0x8c,
	0xfa, 0xc4, 0x4b, 0x55, 0x9c, 0x5a, 0xb1, 0xb9, 0x51, 0xbf, 0xe0, 0xfb, 0xfa, 0xa7, 0xed, 0xba,
	0xca, 0x72, 0x97, 0xd1, 0xf8, 0x68, 0xd4, 0x27, 0x7e, 0x26, 0x34, 0x2b, 0x54, 0x82, 0x45, 0xcc,
	0x39, 0x11, 0xde, 0xa2, 0x02, 0xd7, 0x02, 0x7a, 0x00, 0x69, 0xdc, 0x63, 0x83, 0x58, 0x78, 0x69,
	0xa9, 0xde, 0x69, 0xbc, 0x7c, 0x7d, 0x6b, 0xee, 0x97, 0xd7, 0xb7, 0xee, 0xb4, 0xa9, 0xe8, 0x0c,
	0x5a, 0xf5, 0x90, 0xf5, 0x1a, 0x21, 0xe3, 0x3d, 0xc6, 0xcd, 0xcf, 0x16, 0x8f, 0x4e, 0x1b, 0x32,
	0x0f, 0x5e, 0x7f, 0x4a, 0x63, 0xe1, 0x1b, 0x77, 0xf4, 0x3f, 0x28, 0xb0, 0x16, 0x27, 0xc9, 0x19,
	0x89, 0x82, 0x0e, 0xe6, 0x1d, 0x6f, 0x49, 0x85, 0xc9, 0x5b, 0xe5, 0x43, 0xcc, 0x3b, 0xe8, 0x13,
	0xf0, 0xc6, 0x9b, 0xc8, 0x50, 0x90, 0x24, 0xc6, 0xdd, 0xa0, 0x43, 0x68, 0xbb, 0x23, 0xbc, 0x4c,
	0xc5, 0xa9, 0xa5, 0xfc, 0x35, 0x6b, 0xbf, 0x6f, 0xcc, 0x0f, 0x95, 0x15, 0xfd, 0x17, 0xf2, 0x2d,
	0xdc, 0xed, 0x32, 0x11, 0xd0, 0x38, 0x22, 0x43, 0x2f, 0xab, 0xd0, 0x73, 0x5a, 0xb7, 0x2f, 0x55,
	0xa8, 0x09, 0xd7, 0x4e, 0x68, 0x8c, 0xbb, 0xf4, 0x05, 0x89, 0x02, 0x59, 0x12, 0x8b, 0x0c, 0x0a,
	0x79, 0x75, 0x6c, 0x7c, 0x4e, 0x04, 0x36, 0xb0, 0x14, 0xd6, 0xc4, 0x30, 0x30, 0x16, 0x2c, 0x28,
	0x8b, 0x03, 0x2e, 0xb0, 0x18, 0x70, 0x2f, 0xa7, 0xaa, 0x7c, 0xaf, 0x7e, 0x69, 0x17, 0xd5, 0x8f,
	0x86, 0x7b, 0x53, 0xbe, 0x4f, 0x94, 0xab, 0x5f, 0x12, 0x17, 0x68, 0xd1, 0x16, 0xac, 0x52, 0x1e,
	0x4c, 0xb7, 0x6a, 0x88, 0xbb, 0x5d, 0x2f, 0x5f, 0x71, 0x6a, 0x19, 0xdf, 0xa5, 0x7c, 0x57, 0x5a,
	0x54, 0x37, 0xec, 0xe2, 0x6e, 0xb7, 0xfa, 0x35, 0x14, 0x65, 0x9e, 0xdb, 0x61, 0x28, 0xcb, 0x4b,
	0xe3, 0x36, 0x0a, 0x60, 0x15, 0xb7, 0x58, 0x22, 0xec, 0xd7, 0x99, 0x73, 0x73, 0xde, 0xef, 0xdc,
	0x56, 0x0c, 0x96, 0x0a, 0xa2, 0x90, 0xaa, 0xc7, 0x90, 0x93, 0xa1, 0x0f, 0xfa, 0x32, 0x6b, 0x2e,
	0x3b, 0xb2, 0x8d, 0x79, 0xd0, 0xa5, 0x3d, 0xaa, 0xa3, 0xa4, 0xfc, 0x4c, 0x1b, 0xf3, 0x2f, 0xa4,
	0x8c, 0x36, 0x61, 0x85, 0xf2, 0x00, 0x27, 0x2d, 0x2a, 0x12, 0x9c, 0x8c, 0xf4, 0xb7, 0xcc, 0xab,
	0x6f, 0x59, 0xa6, 0x7c, 0xdb, 0xea, 0xd5, 0xa7, 0xfc, 0x9e, 0x86, 0xe2, 0xc1, 0x40, 0x4c, 0xb3,
	0x65, 0x1d, 0x32, 0x09, 0x09, 0x09, 0x3d, 0x1b, 0xf3, 0x65, 0x2c, 0x4b, 0x68, 0xbb, 0x3e, 0xcf,
	0x99, 0x65, 0x6b, 0xb0, 0xac, 0x99, 0x21, 0xc6, 0xc2, 0xfb, 0x11, 0x63, 0x42, 0x81, 0xd4, 0x3f,
	0xa3, 0x80, 0xa4, 0x30, 0xe7, 0x41, 0xcc, 0xe2, 0x90, 0x28, 0x96, 0xa5, 0xfc, 0x8c, 0xe0, 0xfc,
	0xb1, 0x94, 0x67, 0xab, 0x99, 0x3e, 0x57, 0x4d, 0x63, 0xec, 0x27, 0x34, 0x24, 0x86, 0x38, 0xd2,
	0x78, 0x28, 0x65, 0x54, 0x03, 0xd7, 0x18, 0x59, 0x42, 0xc5, 0x28, 0x38, 0x21, 0xc4, 0xbb, 0xae,
	0xf6, 0x14, 0xf5, 0x1e, 0xa5, 0xde, 0x23, 0x04, 0x21, 0x48, 0x29, 0xea, 0x65, 0x94, 0x55, 0xad,
	0xdf, 0x85, 0x38, 0x97, 0xb1, 0x12, 0x2e, 0x65, 0xe5, 0x0d, 0x90, 0x69, 0x06, 0x03, 0x4e, 0x22,
	0xaf, 0xa4, 0x76, 0x2e, 0xb5, 0x31, 0x7f, 0xca, 0x49, 0x84, 0xbe, 0x84, 0x55, 0x72, 0x72, 0x42,
	0x42, 0x41, 0xcf, 0x48, 0x30, 0xf9, 0xb8, 0x6b, 0xaa, 0xc4, 0x75, 0x53, 0xe2, 0xdb, 0xef, 0x50,
	0xe2, 0x7d, 0xd9, 0xac, 0x63, 0xa8, 0x07, 0xb6, 0x2a, 0xf5, 0xf3, 0xf8, 0xba, 0xb2, 0x6b, 0x2a,
	0x8b, 0x99, 0xfd, 0xba, 0xc4, 0x37, 0x01, 0xe4, 0xe1, 0xf4, 0x07, 0xad, 0x53, 0x32, 0x52, 0xec,
	0xce, 0xfa, 0xf2, 0xb8, 0x0e, 0x95, 0xe2, 0x92, 0x41, 0x90, 0xff, 0xb7, 0x07, 0xc1, 0x23, 0xc8,
	0x4b, 0xb6, 0x04, 0x4c, 0xf3, 0xcc, 0xf3, 0x2a, 0x4e, 0x2d, 0xd7, 0xdc, 0xbc, 0x22, 0xc0, 0x14,
	0x33, 0xfd, 0x5c, 0x38, 0x11, 0x3e, 0x4b, 0x65, 0x0a, 0x6e, 0xa9, 0xfa, 0xc3, 0x3c, 0xa4, 0x0d,
	0xfe, 0x36, 0xa4, 0x4d, 0xea, 0x8e, 0x4a, 0xfd, 0x83, 0xab, 0x90, 0x43, 0x31, 0x34, 0x09, 0x1b,
	0x47, 0xb4, 0x01, 0x45, 0xbd, 0x0a, 0x7a, 0x84, 0x73, 0xdc, 0x26, 0x8a, 0x7f, 0x59, 0xbf, 0xa0,
	0xb5, 0x8f, 0xb4, 0x52, 0xce, 0x7c, 0x92, 0x24, 0x2c, 0x19, 0xef, 0x4a, 0xeb, 0x99, 0xaf, 0x94,
	0x76, 0xd3, 0x5d, 0x28, 0x75, 0x31, 0x17, 0x4f, 0xfb, 0x11, 0x16, 0x24, 0x10, 0xb4, 0x47, 0xb8,
	0xc0, 0xbd, 0xbe, 0x62, 0xeb, 0x82, 0xbf, 0x3a, 0xb1, 0x1d, 0x59, 0x13, 0xaa, 0x81, 0x9c, 0x21,
	0x72, 0x3e, 0xf9, 0xe4, 0x64, 0x10, 0x47, 0x24, 0x52, 0xd4, 0xd4, 0xa3, 0x65, 0x5a, 0x8d, 0x3e,
	0x84, 0x95, 0x30, 0x21, 0x58, 0xce, 0xc4, 0x09, 0xf2, 0xa2, 0x42, 0x76, 0x8d, 0x61, 0x0c, 0x5b,
	0xfd, 0x76, 0x1e, 0x0a, 0x3e, 0x39, 0x23, 0x89, 0xb0, 0x23, 0x6e, 0x03, 0x8a, 0x89, 0x52, 0x04,
	0x38, 0x8a, 0x12, 0xc2, 0xb9, 0x19, 0x46, 0x05, 0xad, 0xdd, 0xd6, 0x4a, 0xf4, 0x7f, 0x28, 0xea,
	0x13, 0x8b, 0x03, 0x6d, 0x30, 0x93, 0x4e, 0x9d, 0xe3, 0x41, 0xac, 0x31, 0x65, 0x35, 0xd4, 0x4c,
	0x1d, 0x63, 0xe9, 0x5b, 0x3c, 0xaf, 0x94, 0x16, 0x6a, 0x12, 0xd1, 0xd6, 0x4c, 0x7e, 0x59, 0xde,
	0x46, 0xb4, 0x45, 0x7b, 0x06, 0xae, 0xd9, 0x36, 0x69, 0xed, 0xc5, 0xf7, 0x9b, 0x4e, 0x26, 0x9e,
	0x25, 0x42, 0xf5, 0xbb, 0x45, 0xc8, 0x4f, 0xee, 0x9a, 0xa3, 0x21, 0xf2, 0x60, 0x49, 0x95, 0x8a,
	0xd9, 0x51, 0x6c, 0x45, 0xf9, 0x64, 0xd0, 0x43, 0x43, 0x9f, 0xbe, 0x16, 0xd0, 0x57, 0x90, 0x55,
	0xf7, 0xcf, 0x09, 0x21, 0xdc, 0x24, 0xb5, 0xfb, 0x37, 0x93, 0xfa, 0xe3, 0xf5, 0x2d, 0x77, 0x84,
	0x7b, 0xdd, 0x4f, 0xab, 0x63, 0xa4, 0xaa, 0x9f, 0x91, 0xeb, 0x3d, 0x42, 0x38, 0xba, 0x03, 0xcb,
	0x09, 0xe9, 0xe2, 0x11, 0x89, 0xce, 0x75, 0x56, 0xd1, 0xa8, 0x6d, 0x99, 0xf6, 0x20, 0x17, 0x86,
	0x62, 0x68, 0xa9, 0x9a, 0x51, 0x4c, 0xda, 0xb8, 0xa2, 0xdf, 0x4d, 0xaf, 0x43, 0x38, 0xee, 0x7b,
	0xf4, 0x04, 0x8a, 0x54, 0xbf, 0xe6, 0x82, 0xbe, 0xba, 0xa0, 0xd4, 0x98, 0xcc, 0x35, 0x3f, 0xba,
	0x02, 0x6a, 0xe6, 0x09, 0xe8, 0x17, 0xe8, 0xcc, 0x8b, 0xf0, 0x18, 0x96, 0x99, 0xb9, 0xf5, 0x2c,
	0x2a, 0x54, 0x16, 0x6a, 0xb9, 0xe6, 0xd6, 0x15, 0xa8, 0xb3, 0x77, 0xa5, 0x5f, 0x64, 0xb3, 0x77,
	0x67, 0x02, 0x37, 0xd4, 0x23, 0x34, 0x64, 0xdd, 0x20, 0x64, 0xb1, 0x48, 0x70, 0x28, 0x82, 0x33,
	0x92, 0x70, 0xca, 0x62, 0xf3, 0x6c, 0xf9, 0xf8, 0x8a, 0x08, 0x87, 0xc6, 0x7f, 0xd7, 0xb8, 0x1f,
	0x6b, 0x6f, 0xff, 0x7a, 0xff, 0x62, 0x03, 0x7a, 0x36, 0x6e, 0x5b, 0x3b, 0xb5, 0xf2, 0xef, 0x54,
	0xa0, 0x19, 0xba, 0xed, 0xa4, 0x64, 0x9b, 0xd8, 0x56, 0x37, 0xca, 0xcd, 0x6f, 0x00, 0x26, 0x13,
	0x08, 0x21, 0x28, 0x1e, 0x92, 0x38, 0xa2, 0x71, 0xdb, 0xd4, 0xd6, 0x9d, 0x43, 0xab, 0xb0, 0x6c,
	0x74, 0xb6, 0x32, 0xae, 0x83, 0x56, 0xa0, 0x60, 0xa5, 0x47, 0x34, 0x26, 0x91, 0xbb, 0x20, 0x55,
	0x66, 0x9f, 0x0e, 0xeb, 0xa6, 0x50, 0x1e, 0x32, 0x7a, 0x4d, 0x22, 0x77, 0x11, 0xe5, 0x60, 0x69,
	0x5b, 0xbf, 0x7a, 0xdc, 0xf4, 0x7a, 0xea, 0xa7, 0x1f, 0xcb, 0xce, 0xe6, 0xe7, 0x50, 0xba, 0x68,
	0x74, 0x23, 0x17, 0xf2, 0x8f, 0x99, 0xd8, 0xb3, 0x4f, 0x46, 0x77, 0x0e, 0x15, 0x20, 0x3b, 0x11,
	0x1d, 0x89, 0x7c, 0x7f, 0x48, 0xc2, 0x81, 0x04, 0x9b, 0x37, 0x60, 0x0d, 0xb8, 0xfe, 0x17, 0x95,
	0x45, 0x69, 0x98, 0x3f, 0xbe, 0xeb, 0xce, 0xa9, 0xdf, 0xa6, 0xeb, 0x68, 0x87, 0x9d, 0x07, 0x2f,
	0xdf, 0x94, 0x9d, 0x57, 0x6f, 0xca, 0xce, 0x6f, 0x6f, 0xca, 0xce, 0xf7, 0x6f, 0xcb, 0x73, 0xaf,
	0xde, 0x96, 0xe7, 0x7e, 0x7e, 0x5b, 0x9e, 0x7b, 0xbe, 0x35, 0xc5, 0x24, 0x59, 0xd8, 0x2d, 0xfd,
	0xa7, 0x24, 0x66, 0x11, 0x69, 0x0c, 0xa7, 0xff, 0xfb, 0x28, 0x52, 0xb5, 0xd2, 0xea, 0xe0, 0xee,
	0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0xea, 0x3e, 0x56, 0xd6, 0x29, 0x0d, 0x00, 0x00,
}

func (m *InboundParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCrossChainCall {
		i--
		if m.IsCrossChainCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.FinalizedZetaHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.FinalizedZetaHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.BallotIndex) > 0 {
		i -= len(m.BallotIndex)
		copy(dAtA[i:], m.BallotIndex)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.BallotIndex)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ObservedExternalHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.ObservedExternalHeight))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ObservedHash) > 0 {
		i -= len(m.ObservedHash)
		copy(dAtA[i:], m.ObservedHash)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.ObservedHash)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinType != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxOrigin) > 0 {
		i -= len(m.TxOrigin)
		copy(dAtA[i:], m.TxOrigin)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.TxOrigin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderChainId != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.SenderChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZetaAccounting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZetaAccounting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZetaAccounting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AbortedZetaAmount.Size()
		i -= size
		if _, err := m.AbortedZetaAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CallOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsArbitraryCall {
		i--
		if m.IsArbitraryCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.GasLimit != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutboundParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CallOptions != nil {
		{
			size, err := m.CallOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.GasPriorityFee) > 0 {
		i -= len(m.GasPriorityFee)
		copy(dAtA[i:], m.GasPriorityFee)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.GasPriorityFee)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.EffectiveGasLimit != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.EffectiveGasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	{
		size := m.EffectiveGasPrice.Size()
		i -= size
		if _, err := m.EffectiveGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.GasUsed != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x60
	}
	if len(m.TssPubkey) > 0 {
		i -= len(m.TssPubkey)
		copy(dAtA[i:], m.TssPubkey)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.TssPubkey)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ObservedExternalHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.ObservedExternalHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.BallotIndex) > 0 {
		i -= len(m.BallotIndex)
		copy(dAtA[i:], m.BallotIndex)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.BallotIndex)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GasPrice) > 0 {
		i -= len(m.GasPrice)
		copy(dAtA[i:], m.GasPrice)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.GasPrice)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GasLimit != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.TssNonce != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.TssNonce))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.CoinType != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverChainId != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.ReceiverChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedTimestamp != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.CreatedTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.IsAbortRefunded {
		i--
		if m.IsAbortRefunded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LastUpdateTimestamp != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.LastUpdateTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RevertOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevertOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevertOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RevertGasLimit.Size()
		i -= size
		if _, err := m.RevertGasLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.RevertMessage) > 0 {
		i -= len(m.RevertMessage)
		copy(dAtA[i:], m.RevertMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.RevertMessage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AbortAddress) > 0 {
		i -= len(m.AbortAddress)
		copy(dAtA[i:], m.AbortAddress)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.AbortAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CallOnRevert {
		i--
		if m.CallOnRevert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RevertAddress) > 0 {
		i -= len(m.RevertAddress)
		copy(dAtA[i:], m.RevertAddress)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.RevertAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevertOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.ProtocolContractVersion != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.ProtocolContractVersion))
		i--
		dAtA[i] = 0x58
	}
	if len(m.OutboundParams) > 0 {
		for iNdEx := len(m.OutboundParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.InboundParams != nil {
		{
			size, err := m.InboundParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CctxStatus != nil {
		{
			size, err := m.CctxStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.RelayedMessage) > 0 {
		i -= len(m.RelayedMessage)
		copy(dAtA[i:], m.RelayedMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.RelayedMessage)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.ZetaFees.Size()
		i -= size
		if _, err := m.ZetaFees.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossChainTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossChainTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InboundParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.SenderChainId != 0 {
		n += 1 + sovCrossChainTx(uint64(m.SenderChainId))
	}
	l = len(m.TxOrigin)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovCrossChainTx(uint64(m.CoinType))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	l = len(m.ObservedHash)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.ObservedExternalHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.ObservedExternalHeight))
	}
	l = len(m.BallotIndex)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.FinalizedZetaHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.FinalizedZetaHeight))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovCrossChainTx(uint64(m.TxFinalizationStatus))
	}
	if m.IsCrossChainCall {
		n += 2
	}
	return n
}

func (m *ZetaAccounting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AbortedZetaAmount.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	return n
}

func (m *CallOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasLimit != 0 {
		n += 1 + sovCrossChainTx(uint64(m.GasLimit))
	}
	if m.IsArbitraryCall {
		n += 2
	}
	return n
}

func (m *OutboundParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.ReceiverChainId != 0 {
		n += 1 + sovCrossChainTx(uint64(m.ReceiverChainId))
	}
	if m.CoinType != 0 {
		n += 1 + sovCrossChainTx(uint64(m.CoinType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	if m.TssNonce != 0 {
		n += 1 + sovCrossChainTx(uint64(m.TssNonce))
	}
	if m.GasLimit != 0 {
		n += 1 + sovCrossChainTx(uint64(m.GasLimit))
	}
	l = len(m.GasPrice)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.BallotIndex)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.ObservedExternalHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.ObservedExternalHeight))
	}
	l = len(m.TssPubkey)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovCrossChainTx(uint64(m.TxFinalizationStatus))
	}
	if m.GasUsed != 0 {
		n += 2 + sovCrossChainTx(uint64(m.GasUsed))
	}
	l = m.EffectiveGasPrice.Size()
	n += 2 + l + sovCrossChainTx(uint64(l))
	if m.EffectiveGasLimit != 0 {
		n += 2 + sovCrossChainTx(uint64(m.EffectiveGasLimit))
	}
	l = len(m.GasPriorityFee)
	if l > 0 {
		n += 2 + l + sovCrossChainTx(uint64(l))
	}
	if m.CallOptions != nil {
		l = m.CallOptions.Size()
		n += 2 + l + sovCrossChainTx(uint64(l))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCrossChainTx(uint64(m.Status))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.LastUpdateTimestamp != 0 {
		n += 1 + sovCrossChainTx(uint64(m.LastUpdateTimestamp))
	}
	if m.IsAbortRefunded {
		n += 2
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovCrossChainTx(uint64(m.CreatedTimestamp))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	return n
}

func (m *RevertOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RevertAddress)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.CallOnRevert {
		n += 2
	}
	l = len(m.AbortAddress)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.RevertMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = m.RevertGasLimit.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	return n
}

func (m *CrossChainTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = m.ZetaFees.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	l = len(m.RelayedMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.CctxStatus != nil {
		l = m.CctxStatus.Size()
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.InboundParams != nil {
		l = m.InboundParams.Size()
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if len(m.OutboundParams) > 0 {
		for _, e := range m.OutboundParams {
			l = e.Size()
			n += 1 + l + sovCrossChainTx(uint64(l))
		}
	}
	if m.ProtocolContractVersion != 0 {
		n += 1 + sovCrossChainTx(uint64(m.ProtocolContractVersion))
	}
	l = m.RevertOptions.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	return n
}

func sovCrossChainTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossChainTx(x uint64) (n int) {
	return sovCrossChainTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InboundParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChainId", wireType)
			}
			m.SenderChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedExternalHeight", wireType)
			}
			m.ObservedExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedZetaHeight", wireType)
			}
			m.FinalizedZetaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedZetaHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCrossChainCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCrossChainCall = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZetaAccounting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZetaAccounting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZetaAccounting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedZetaAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbortedZetaAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArbitraryCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArbitraryCall = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChainId", wireType)
			}
			m.ReceiverChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssNonce", wireType)
			}
			m.TssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedExternalHeight", wireType)
			}
			m.ObservedExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectiveGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveGasLimit", wireType)
			}
			m.EffectiveGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPriorityFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPriorityFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallOptions == nil {
				m.CallOptions = &CallOptions{}
			}
			if err := m.CallOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CctxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTimestamp", wireType)
			}
			m.LastUpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAbortRefunded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAbortRefunded = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevertOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevertOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevertOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevertAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevertAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallOnRevert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CallOnRevert = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbortAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevertMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevertMessage = append(m.RevertMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.RevertMessage == nil {
				m.RevertMessage = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevertGasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevertGasLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZetaFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayedMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CctxStatus == nil {
				m.CctxStatus = &Status{}
			}
			if err := m.CctxStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundParams == nil {
				m.InboundParams = &InboundParams{}
			}
			if err := m.InboundParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundParams = append(m.OutboundParams, &OutboundParams{})
			if err := m.OutboundParams[len(m.OutboundParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolContractVersion", wireType)
			}
			m.ProtocolContractVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolContractVersion |= ProtocolContractVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevertOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevertOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossChainTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossChainTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossChainTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossChainTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossChainTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossChainTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossChainTx = fmt.Errorf("proto: unexpected end of group")
)
