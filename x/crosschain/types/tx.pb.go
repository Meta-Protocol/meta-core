// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/crosschain/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	chains "github.com/zeta-chain/zetacore/pkg/chains"
	coin "github.com/zeta-chain/zetacore/pkg/coin"
	proofs "github.com/zeta-chain/zetacore/pkg/proofs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgMigrateTssFunds struct {
	Creator string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId int64                                   `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
}

func (m *MsgMigrateTssFunds) Reset()         { *m = MsgMigrateTssFunds{} }
func (m *MsgMigrateTssFunds) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateTssFunds) ProtoMessage()    {}
func (*MsgMigrateTssFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{0}
}
func (m *MsgMigrateTssFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateTssFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateTssFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateTssFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateTssFunds.Merge(m, src)
}
func (m *MsgMigrateTssFunds) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateTssFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateTssFunds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateTssFunds proto.InternalMessageInfo

func (m *MsgMigrateTssFunds) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMigrateTssFunds) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type MsgMigrateTssFundsResponse struct {
}

func (m *MsgMigrateTssFundsResponse) Reset()         { *m = MsgMigrateTssFundsResponse{} }
func (m *MsgMigrateTssFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateTssFundsResponse) ProtoMessage()    {}
func (*MsgMigrateTssFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{1}
}
func (m *MsgMigrateTssFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateTssFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateTssFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateTssFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateTssFundsResponse.Merge(m, src)
}
func (m *MsgMigrateTssFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateTssFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateTssFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateTssFundsResponse proto.InternalMessageInfo

type MsgUpdateTssAddress struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TssPubkey string `protobuf:"bytes,2,opt,name=tss_pubkey,json=tssPubkey,proto3" json:"tss_pubkey,omitempty"`
}

func (m *MsgUpdateTssAddress) Reset()         { *m = MsgUpdateTssAddress{} }
func (m *MsgUpdateTssAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTssAddress) ProtoMessage()    {}
func (*MsgUpdateTssAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{2}
}
func (m *MsgUpdateTssAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTssAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTssAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTssAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTssAddress.Merge(m, src)
}
func (m *MsgUpdateTssAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTssAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTssAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTssAddress proto.InternalMessageInfo

func (m *MsgUpdateTssAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTssAddress) GetTssPubkey() string {
	if m != nil {
		return m.TssPubkey
	}
	return ""
}

type MsgUpdateTssAddressResponse struct {
}

func (m *MsgUpdateTssAddressResponse) Reset()         { *m = MsgUpdateTssAddressResponse{} }
func (m *MsgUpdateTssAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTssAddressResponse) ProtoMessage()    {}
func (*MsgUpdateTssAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{3}
}
func (m *MsgUpdateTssAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTssAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTssAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTssAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTssAddressResponse.Merge(m, src)
}
func (m *MsgUpdateTssAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTssAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTssAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTssAddressResponse proto.InternalMessageInfo

type MsgAddInboundTracker struct {
	Creator   string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId   int64         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash    string        `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	CoinType  coin.CoinType `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,7,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *MsgAddInboundTracker) Reset()         { *m = MsgAddInboundTracker{} }
func (m *MsgAddInboundTracker) String() string { return proto.CompactTextString(m) }
func (*MsgAddInboundTracker) ProtoMessage()    {}
func (*MsgAddInboundTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{4}
}
func (m *MsgAddInboundTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddInboundTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddInboundTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddInboundTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddInboundTracker.Merge(m, src)
}
func (m *MsgAddInboundTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddInboundTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddInboundTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddInboundTracker proto.InternalMessageInfo

func (m *MsgAddInboundTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddInboundTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddInboundTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgAddInboundTracker) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func (m *MsgAddInboundTracker) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddInboundTracker) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MsgAddInboundTracker) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

type MsgAddInboundTrackerResponse struct {
}

func (m *MsgAddInboundTrackerResponse) Reset()         { *m = MsgAddInboundTrackerResponse{} }
func (m *MsgAddInboundTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddInboundTrackerResponse) ProtoMessage()    {}
func (*MsgAddInboundTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{5}
}
func (m *MsgAddInboundTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddInboundTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddInboundTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddInboundTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddInboundTrackerResponse.Merge(m, src)
}
func (m *MsgAddInboundTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddInboundTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddInboundTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddInboundTrackerResponse proto.InternalMessageInfo

type MsgWhitelistERC20 struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Erc20Address string `protobuf:"bytes,2,opt,name=erc20_address,json=erc20Address,proto3" json:"erc20_address,omitempty"`
	ChainId      int64  `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Symbol       string `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals     uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	GasLimit     int64  `protobuf:"varint,7,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *MsgWhitelistERC20) Reset()         { *m = MsgWhitelistERC20{} }
func (m *MsgWhitelistERC20) String() string { return proto.CompactTextString(m) }
func (*MsgWhitelistERC20) ProtoMessage()    {}
func (*MsgWhitelistERC20) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{6}
}
func (m *MsgWhitelistERC20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWhitelistERC20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWhitelistERC20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWhitelistERC20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWhitelistERC20.Merge(m, src)
}
func (m *MsgWhitelistERC20) XXX_Size() int {
	return m.Size()
}
func (m *MsgWhitelistERC20) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWhitelistERC20.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWhitelistERC20 proto.InternalMessageInfo

func (m *MsgWhitelistERC20) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWhitelistERC20) GetErc20Address() string {
	if m != nil {
		return m.Erc20Address
	}
	return ""
}

func (m *MsgWhitelistERC20) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgWhitelistERC20) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgWhitelistERC20) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgWhitelistERC20) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *MsgWhitelistERC20) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

type MsgWhitelistERC20Response struct {
	Zrc20Address string `protobuf:"bytes,1,opt,name=zrc20_address,json=zrc20Address,proto3" json:"zrc20_address,omitempty"`
	CctxIndex    string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
}

func (m *MsgWhitelistERC20Response) Reset()         { *m = MsgWhitelistERC20Response{} }
func (m *MsgWhitelistERC20Response) String() string { return proto.CompactTextString(m) }
func (*MsgWhitelistERC20Response) ProtoMessage()    {}
func (*MsgWhitelistERC20Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{7}
}
func (m *MsgWhitelistERC20Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWhitelistERC20Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWhitelistERC20Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWhitelistERC20Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWhitelistERC20Response.Merge(m, src)
}
func (m *MsgWhitelistERC20Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgWhitelistERC20Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWhitelistERC20Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWhitelistERC20Response proto.InternalMessageInfo

func (m *MsgWhitelistERC20Response) GetZrc20Address() string {
	if m != nil {
		return m.Zrc20Address
	}
	return ""
}

func (m *MsgWhitelistERC20Response) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

type MsgAddOutboundTracker struct {
	Creator   string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId   int64         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce     uint64        `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TxHash    string        `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,7,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *MsgAddOutboundTracker) Reset()         { *m = MsgAddOutboundTracker{} }
func (m *MsgAddOutboundTracker) String() string { return proto.CompactTextString(m) }
func (*MsgAddOutboundTracker) ProtoMessage()    {}
func (*MsgAddOutboundTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{8}
}
func (m *MsgAddOutboundTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOutboundTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOutboundTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOutboundTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOutboundTracker.Merge(m, src)
}
func (m *MsgAddOutboundTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOutboundTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOutboundTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOutboundTracker proto.InternalMessageInfo

func (m *MsgAddOutboundTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddOutboundTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddOutboundTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgAddOutboundTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgAddOutboundTracker) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddOutboundTracker) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MsgAddOutboundTracker) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

type MsgAddOutboundTrackerResponse struct {
	IsRemoved bool `protobuf:"varint,1,opt,name=is_removed,json=isRemoved,proto3" json:"is_removed,omitempty"`
}

func (m *MsgAddOutboundTrackerResponse) Reset()         { *m = MsgAddOutboundTrackerResponse{} }
func (m *MsgAddOutboundTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddOutboundTrackerResponse) ProtoMessage()    {}
func (*MsgAddOutboundTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{9}
}
func (m *MsgAddOutboundTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOutboundTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOutboundTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOutboundTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOutboundTrackerResponse.Merge(m, src)
}
func (m *MsgAddOutboundTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOutboundTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOutboundTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOutboundTrackerResponse proto.InternalMessageInfo

func (m *MsgAddOutboundTrackerResponse) GetIsRemoved() bool {
	if m != nil {
		return m.IsRemoved
	}
	return false
}

type MsgRemoveOutboundTracker struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce   uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgRemoveOutboundTracker) Reset()         { *m = MsgRemoveOutboundTracker{} }
func (m *MsgRemoveOutboundTracker) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveOutboundTracker) ProtoMessage()    {}
func (*MsgRemoveOutboundTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{10}
}
func (m *MsgRemoveOutboundTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveOutboundTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveOutboundTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveOutboundTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveOutboundTracker.Merge(m, src)
}
func (m *MsgRemoveOutboundTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveOutboundTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveOutboundTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveOutboundTracker proto.InternalMessageInfo

func (m *MsgRemoveOutboundTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveOutboundTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgRemoveOutboundTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgRemoveOutboundTrackerResponse struct {
}

func (m *MsgRemoveOutboundTrackerResponse) Reset()         { *m = MsgRemoveOutboundTrackerResponse{} }
func (m *MsgRemoveOutboundTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveOutboundTrackerResponse) ProtoMessage()    {}
func (*MsgRemoveOutboundTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{11}
}
func (m *MsgRemoveOutboundTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveOutboundTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveOutboundTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveOutboundTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveOutboundTrackerResponse.Merge(m, src)
}
func (m *MsgRemoveOutboundTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveOutboundTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveOutboundTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveOutboundTrackerResponse proto.InternalMessageInfo

type MsgVoteGasPrice struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId     int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Price       uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	PriorityFee uint64 `protobuf:"varint,6,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
	BlockNumber uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *MsgVoteGasPrice) Reset()         { *m = MsgVoteGasPrice{} }
func (m *MsgVoteGasPrice) String() string { return proto.CompactTextString(m) }
func (*MsgVoteGasPrice) ProtoMessage()    {}
func (*MsgVoteGasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{12}
}
func (m *MsgVoteGasPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteGasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteGasPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteGasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteGasPrice.Merge(m, src)
}
func (m *MsgVoteGasPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteGasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteGasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteGasPrice proto.InternalMessageInfo

func (m *MsgVoteGasPrice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteGasPrice) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgVoteGasPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MsgVoteGasPrice) GetPriorityFee() uint64 {
	if m != nil {
		return m.PriorityFee
	}
	return 0
}

func (m *MsgVoteGasPrice) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type MsgVoteGasPriceResponse struct {
}

func (m *MsgVoteGasPriceResponse) Reset()         { *m = MsgVoteGasPriceResponse{} }
func (m *MsgVoteGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteGasPriceResponse) ProtoMessage()    {}
func (*MsgVoteGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{13}
}
func (m *MsgVoteGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteGasPriceResponse.Merge(m, src)
}
func (m *MsgVoteGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteGasPriceResponse proto.InternalMessageInfo

type MsgVoteOutbound struct {
	Creator                           string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CctxHash                          string                                  `protobuf:"bytes,2,opt,name=cctx_hash,json=cctxHash,proto3" json:"cctx_hash,omitempty"`
	ObservedOutboundHash              string                                  `protobuf:"bytes,3,opt,name=observed_outbound_hash,json=observedOutboundHash,proto3" json:"observed_outbound_hash,omitempty"`
	ObservedOutboundBlockHeight       uint64                                  `protobuf:"varint,4,opt,name=observed_outbound_block_height,json=observedOutboundBlockHeight,proto3" json:"observed_outbound_block_height,omitempty"`
	ObservedOutboundGasUsed           uint64                                  `protobuf:"varint,10,opt,name=observed_outbound_gas_used,json=observedOutboundGasUsed,proto3" json:"observed_outbound_gas_used,omitempty"`
	ObservedOutboundEffectiveGasPrice github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,11,opt,name=observed_outbound_effective_gas_price,json=observedOutboundEffectiveGasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"observed_outbound_effective_gas_price"`
	ObservedOutboundEffectiveGasLimit uint64                                  `protobuf:"varint,12,opt,name=observed_outbound_effective_gas_limit,json=observedOutboundEffectiveGasLimit,proto3" json:"observed_outbound_effective_gas_limit,omitempty"`
	ValueReceived                     github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=value_received,json=valueReceived,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"value_received" yaml:"value_received"`
	Status                            chains.ReceiveStatus                    `protobuf:"varint,6,opt,name=status,proto3,enum=zetachain.zetacore.pkg.chains.ReceiveStatus" json:"status,omitempty"`
	OutboundChain                     int64                                   `protobuf:"varint,7,opt,name=outbound_chain,json=outboundChain,proto3" json:"outbound_chain,omitempty"`
	OutboundTssNonce                  uint64                                  `protobuf:"varint,8,opt,name=outbound_tss_nonce,json=outboundTssNonce,proto3" json:"outbound_tss_nonce,omitempty"`
	CoinType                          coin.CoinType                           `protobuf:"varint,9,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
}

func (m *MsgVoteOutbound) Reset()         { *m = MsgVoteOutbound{} }
func (m *MsgVoteOutbound) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOutbound) ProtoMessage()    {}
func (*MsgVoteOutbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{14}
}
func (m *MsgVoteOutbound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOutbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOutbound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOutbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOutbound.Merge(m, src)
}
func (m *MsgVoteOutbound) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOutbound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOutbound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOutbound proto.InternalMessageInfo

func (m *MsgVoteOutbound) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteOutbound) GetCctxHash() string {
	if m != nil {
		return m.CctxHash
	}
	return ""
}

func (m *MsgVoteOutbound) GetObservedOutboundHash() string {
	if m != nil {
		return m.ObservedOutboundHash
	}
	return ""
}

func (m *MsgVoteOutbound) GetObservedOutboundBlockHeight() uint64 {
	if m != nil {
		return m.ObservedOutboundBlockHeight
	}
	return 0
}

func (m *MsgVoteOutbound) GetObservedOutboundGasUsed() uint64 {
	if m != nil {
		return m.ObservedOutboundGasUsed
	}
	return 0
}

func (m *MsgVoteOutbound) GetObservedOutboundEffectiveGasLimit() uint64 {
	if m != nil {
		return m.ObservedOutboundEffectiveGasLimit
	}
	return 0
}

func (m *MsgVoteOutbound) GetStatus() chains.ReceiveStatus {
	if m != nil {
		return m.Status
	}
	return chains.ReceiveStatus_created
}

func (m *MsgVoteOutbound) GetOutboundChain() int64 {
	if m != nil {
		return m.OutboundChain
	}
	return 0
}

func (m *MsgVoteOutbound) GetOutboundTssNonce() uint64 {
	if m != nil {
		return m.OutboundTssNonce
	}
	return 0
}

func (m *MsgVoteOutbound) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

type MsgVoteOutboundResponse struct {
}

func (m *MsgVoteOutboundResponse) Reset()         { *m = MsgVoteOutboundResponse{} }
func (m *MsgVoteOutboundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOutboundResponse) ProtoMessage()    {}
func (*MsgVoteOutboundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{15}
}
func (m *MsgVoteOutboundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOutboundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOutboundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOutboundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOutboundResponse.Merge(m, src)
}
func (m *MsgVoteOutboundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOutboundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOutboundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOutboundResponse proto.InternalMessageInfo

type MsgVoteInbound struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChainId int64  `protobuf:"varint,3,opt,name=sender_chain_id,json=senderChainId,proto3" json:"sender_chain_id,omitempty"`
	Receiver      string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain int64  `protobuf:"varint,5,opt,name=receiver_chain,json=receiverChain,proto3" json:"receiver_chain,omitempty"`
	// string zeta_burnt = 6;
	Amount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	// string mMint = 7;
	Message            string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	InboundHash        string        `protobuf:"bytes,9,opt,name=inbound_hash,json=inboundHash,proto3" json:"inbound_hash,omitempty"`
	InboundBlockHeight uint64        `protobuf:"varint,10,opt,name=inbound_block_height,json=inboundBlockHeight,proto3" json:"inbound_block_height,omitempty"`
	GasLimit           uint64        `protobuf:"varint,11,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	CoinType           coin.CoinType `protobuf:"varint,12,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	TxOrigin           string        `protobuf:"bytes,13,opt,name=tx_origin,json=txOrigin,proto3" json:"tx_origin,omitempty"`
	Asset              string        `protobuf:"bytes,14,opt,name=asset,proto3" json:"asset,omitempty"`
	// event index of the sent asset in the observed tx
	EventIndex uint64 `protobuf:"varint,15,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
}

func (m *MsgVoteInbound) Reset()         { *m = MsgVoteInbound{} }
func (m *MsgVoteInbound) String() string { return proto.CompactTextString(m) }
func (*MsgVoteInbound) ProtoMessage()    {}
func (*MsgVoteInbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{16}
}
func (m *MsgVoteInbound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteInbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteInbound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteInbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteInbound.Merge(m, src)
}
func (m *MsgVoteInbound) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteInbound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteInbound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteInbound proto.InternalMessageInfo

func (m *MsgVoteInbound) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteInbound) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgVoteInbound) GetSenderChainId() int64 {
	if m != nil {
		return m.SenderChainId
	}
	return 0
}

func (m *MsgVoteInbound) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgVoteInbound) GetReceiverChain() int64 {
	if m != nil {
		return m.ReceiverChain
	}
	return 0
}

func (m *MsgVoteInbound) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MsgVoteInbound) GetInboundHash() string {
	if m != nil {
		return m.InboundHash
	}
	return ""
}

func (m *MsgVoteInbound) GetInboundBlockHeight() uint64 {
	if m != nil {
		return m.InboundBlockHeight
	}
	return 0
}

func (m *MsgVoteInbound) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *MsgVoteInbound) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func (m *MsgVoteInbound) GetTxOrigin() string {
	if m != nil {
		return m.TxOrigin
	}
	return ""
}

func (m *MsgVoteInbound) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *MsgVoteInbound) GetEventIndex() uint64 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

type MsgVoteInboundResponse struct {
}

func (m *MsgVoteInboundResponse) Reset()         { *m = MsgVoteInboundResponse{} }
func (m *MsgVoteInboundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteInboundResponse) ProtoMessage()    {}
func (*MsgVoteInboundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{17}
}
func (m *MsgVoteInboundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteInboundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteInboundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteInboundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteInboundResponse.Merge(m, src)
}
func (m *MsgVoteInboundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteInboundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteInboundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteInboundResponse proto.InternalMessageInfo

type MsgAbortStuckCCTX struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CctxIndex string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
}

func (m *MsgAbortStuckCCTX) Reset()         { *m = MsgAbortStuckCCTX{} }
func (m *MsgAbortStuckCCTX) String() string { return proto.CompactTextString(m) }
func (*MsgAbortStuckCCTX) ProtoMessage()    {}
func (*MsgAbortStuckCCTX) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{18}
}
func (m *MsgAbortStuckCCTX) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAbortStuckCCTX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAbortStuckCCTX.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAbortStuckCCTX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAbortStuckCCTX.Merge(m, src)
}
func (m *MsgAbortStuckCCTX) XXX_Size() int {
	return m.Size()
}
func (m *MsgAbortStuckCCTX) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAbortStuckCCTX.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAbortStuckCCTX proto.InternalMessageInfo

func (m *MsgAbortStuckCCTX) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAbortStuckCCTX) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

type MsgAbortStuckCCTXResponse struct {
}

func (m *MsgAbortStuckCCTXResponse) Reset()         { *m = MsgAbortStuckCCTXResponse{} }
func (m *MsgAbortStuckCCTXResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAbortStuckCCTXResponse) ProtoMessage()    {}
func (*MsgAbortStuckCCTXResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{19}
}
func (m *MsgAbortStuckCCTXResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAbortStuckCCTXResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAbortStuckCCTXResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAbortStuckCCTXResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAbortStuckCCTXResponse.Merge(m, src)
}
func (m *MsgAbortStuckCCTXResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAbortStuckCCTXResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAbortStuckCCTXResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAbortStuckCCTXResponse proto.InternalMessageInfo

type MsgRefundAbortedCCTX struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CctxIndex     string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
	RefundAddress string `protobuf:"bytes,3,opt,name=refund_address,json=refundAddress,proto3" json:"refund_address,omitempty"`
}

func (m *MsgRefundAbortedCCTX) Reset()         { *m = MsgRefundAbortedCCTX{} }
func (m *MsgRefundAbortedCCTX) String() string { return proto.CompactTextString(m) }
func (*MsgRefundAbortedCCTX) ProtoMessage()    {}
func (*MsgRefundAbortedCCTX) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{20}
}
func (m *MsgRefundAbortedCCTX) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundAbortedCCTX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAbortedCCTX.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundAbortedCCTX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAbortedCCTX.Merge(m, src)
}
func (m *MsgRefundAbortedCCTX) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundAbortedCCTX) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAbortedCCTX.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAbortedCCTX proto.InternalMessageInfo

func (m *MsgRefundAbortedCCTX) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRefundAbortedCCTX) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *MsgRefundAbortedCCTX) GetRefundAddress() string {
	if m != nil {
		return m.RefundAddress
	}
	return ""
}

type MsgRefundAbortedCCTXResponse struct {
}

func (m *MsgRefundAbortedCCTXResponse) Reset()         { *m = MsgRefundAbortedCCTXResponse{} }
func (m *MsgRefundAbortedCCTXResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRefundAbortedCCTXResponse) ProtoMessage()    {}
func (*MsgRefundAbortedCCTXResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{21}
}
func (m *MsgRefundAbortedCCTXResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundAbortedCCTXResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundAbortedCCTXResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundAbortedCCTXResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundAbortedCCTXResponse.Merge(m, src)
}
func (m *MsgRefundAbortedCCTXResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundAbortedCCTXResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundAbortedCCTXResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundAbortedCCTXResponse proto.InternalMessageInfo

type MsgUpdateRateLimiterFlags struct {
	Creator          string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RateLimiterFlags RateLimiterFlags `protobuf:"bytes,2,opt,name=rate_limiter_flags,json=rateLimiterFlags,proto3" json:"rate_limiter_flags"`
}

func (m *MsgUpdateRateLimiterFlags) Reset()         { *m = MsgUpdateRateLimiterFlags{} }
func (m *MsgUpdateRateLimiterFlags) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimiterFlags) ProtoMessage()    {}
func (*MsgUpdateRateLimiterFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{22}
}
func (m *MsgUpdateRateLimiterFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimiterFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimiterFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimiterFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimiterFlags.Merge(m, src)
}
func (m *MsgUpdateRateLimiterFlags) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimiterFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimiterFlags.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimiterFlags proto.InternalMessageInfo

func (m *MsgUpdateRateLimiterFlags) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRateLimiterFlags) GetRateLimiterFlags() RateLimiterFlags {
	if m != nil {
		return m.RateLimiterFlags
	}
	return RateLimiterFlags{}
}

type MsgUpdateRateLimiterFlagsResponse struct {
}

func (m *MsgUpdateRateLimiterFlagsResponse) Reset()         { *m = MsgUpdateRateLimiterFlagsResponse{} }
func (m *MsgUpdateRateLimiterFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateLimiterFlagsResponse) ProtoMessage()    {}
func (*MsgUpdateRateLimiterFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{23}
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse.Merge(m, src)
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateLimiterFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateLimiterFlagsResponse proto.InternalMessageInfo

type MsgMigrateERC20CustodyFunds struct {
	Creator           string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId           int64                                   `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	NewCustodyAddress string                                  `protobuf:"bytes,3,opt,name=new_custody_address,json=newCustodyAddress,proto3" json:"new_custody_address,omitempty"`
	Erc20Address      string                                  `protobuf:"bytes,4,opt,name=erc20_address,json=erc20Address,proto3" json:"erc20_address,omitempty"`
	Amount            github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
}

func (m *MsgMigrateERC20CustodyFunds) Reset()         { *m = MsgMigrateERC20CustodyFunds{} }
func (m *MsgMigrateERC20CustodyFunds) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateERC20CustodyFunds) ProtoMessage()    {}
func (*MsgMigrateERC20CustodyFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{24}
}
func (m *MsgMigrateERC20CustodyFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateERC20CustodyFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateERC20CustodyFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateERC20CustodyFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateERC20CustodyFunds.Merge(m, src)
}
func (m *MsgMigrateERC20CustodyFunds) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateERC20CustodyFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateERC20CustodyFunds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateERC20CustodyFunds proto.InternalMessageInfo

func (m *MsgMigrateERC20CustodyFunds) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMigrateERC20CustodyFunds) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgMigrateERC20CustodyFunds) GetNewCustodyAddress() string {
	if m != nil {
		return m.NewCustodyAddress
	}
	return ""
}

func (m *MsgMigrateERC20CustodyFunds) GetErc20Address() string {
	if m != nil {
		return m.Erc20Address
	}
	return ""
}

type MsgMigrateERC20CustodyFundsResponse struct {
	CctxIndex string `protobuf:"bytes,1,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
}

func (m *MsgMigrateERC20CustodyFundsResponse) Reset()         { *m = MsgMigrateERC20CustodyFundsResponse{} }
func (m *MsgMigrateERC20CustodyFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateERC20CustodyFundsResponse) ProtoMessage()    {}
func (*MsgMigrateERC20CustodyFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{25}
}
func (m *MsgMigrateERC20CustodyFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateERC20CustodyFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateERC20CustodyFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateERC20CustodyFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateERC20CustodyFundsResponse.Merge(m, src)
}
func (m *MsgMigrateERC20CustodyFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateERC20CustodyFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateERC20CustodyFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateERC20CustodyFundsResponse proto.InternalMessageInfo

func (m *MsgMigrateERC20CustodyFundsResponse) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

type MsgUpdateERC20CustodyPauseStatus struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// pause or unpause
	// true = pause, false = unpause
	Pause bool `protobuf:"varint,3,opt,name=pause,proto3" json:"pause,omitempty"`
}

func (m *MsgUpdateERC20CustodyPauseStatus) Reset()         { *m = MsgUpdateERC20CustodyPauseStatus{} }
func (m *MsgUpdateERC20CustodyPauseStatus) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateERC20CustodyPauseStatus) ProtoMessage()    {}
func (*MsgUpdateERC20CustodyPauseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{26}
}
func (m *MsgUpdateERC20CustodyPauseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateERC20CustodyPauseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateERC20CustodyPauseStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateERC20CustodyPauseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateERC20CustodyPauseStatus.Merge(m, src)
}
func (m *MsgUpdateERC20CustodyPauseStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateERC20CustodyPauseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateERC20CustodyPauseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateERC20CustodyPauseStatus proto.InternalMessageInfo

func (m *MsgUpdateERC20CustodyPauseStatus) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateERC20CustodyPauseStatus) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgUpdateERC20CustodyPauseStatus) GetPause() bool {
	if m != nil {
		return m.Pause
	}
	return false
}

type MsgUpdateERC20CustodyPauseStatusResponse struct {
	CctxIndex string `protobuf:"bytes,1,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
}

func (m *MsgUpdateERC20CustodyPauseStatusResponse) Reset() {
	*m = MsgUpdateERC20CustodyPauseStatusResponse{}
}
func (m *MsgUpdateERC20CustodyPauseStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateERC20CustodyPauseStatusResponse) ProtoMessage()    {}
func (*MsgUpdateERC20CustodyPauseStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15f0860550897740, []int{27}
}
func (m *MsgUpdateERC20CustodyPauseStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateERC20CustodyPauseStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateERC20CustodyPauseStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateERC20CustodyPauseStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateERC20CustodyPauseStatusResponse.Merge(m, src)
}
func (m *MsgUpdateERC20CustodyPauseStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateERC20CustodyPauseStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateERC20CustodyPauseStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateERC20CustodyPauseStatusResponse proto.InternalMessageInfo

func (m *MsgUpdateERC20CustodyPauseStatusResponse) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgMigrateTssFunds)(nil), "zetachain.zetacore.crosschain.MsgMigrateTssFunds")
	proto.RegisterType((*MsgMigrateTssFundsResponse)(nil), "zetachain.zetacore.crosschain.MsgMigrateTssFundsResponse")
	proto.RegisterType((*MsgUpdateTssAddress)(nil), "zetachain.zetacore.crosschain.MsgUpdateTssAddress")
	proto.RegisterType((*MsgUpdateTssAddressResponse)(nil), "zetachain.zetacore.crosschain.MsgUpdateTssAddressResponse")
	proto.RegisterType((*MsgAddInboundTracker)(nil), "zetachain.zetacore.crosschain.MsgAddInboundTracker")
	proto.RegisterType((*MsgAddInboundTrackerResponse)(nil), "zetachain.zetacore.crosschain.MsgAddInboundTrackerResponse")
	proto.RegisterType((*MsgWhitelistERC20)(nil), "zetachain.zetacore.crosschain.MsgWhitelistERC20")
	proto.RegisterType((*MsgWhitelistERC20Response)(nil), "zetachain.zetacore.crosschain.MsgWhitelistERC20Response")
	proto.RegisterType((*MsgAddOutboundTracker)(nil), "zetachain.zetacore.crosschain.MsgAddOutboundTracker")
	proto.RegisterType((*MsgAddOutboundTrackerResponse)(nil), "zetachain.zetacore.crosschain.MsgAddOutboundTrackerResponse")
	proto.RegisterType((*MsgRemoveOutboundTracker)(nil), "zetachain.zetacore.crosschain.MsgRemoveOutboundTracker")
	proto.RegisterType((*MsgRemoveOutboundTrackerResponse)(nil), "zetachain.zetacore.crosschain.MsgRemoveOutboundTrackerResponse")
	proto.RegisterType((*MsgVoteGasPrice)(nil), "zetachain.zetacore.crosschain.MsgVoteGasPrice")
	proto.RegisterType((*MsgVoteGasPriceResponse)(nil), "zetachain.zetacore.crosschain.MsgVoteGasPriceResponse")
	proto.RegisterType((*MsgVoteOutbound)(nil), "zetachain.zetacore.crosschain.MsgVoteOutbound")
	proto.RegisterType((*MsgVoteOutboundResponse)(nil), "zetachain.zetacore.crosschain.MsgVoteOutboundResponse")
	proto.RegisterType((*MsgVoteInbound)(nil), "zetachain.zetacore.crosschain.MsgVoteInbound")
	proto.RegisterType((*MsgVoteInboundResponse)(nil), "zetachain.zetacore.crosschain.MsgVoteInboundResponse")
	proto.RegisterType((*MsgAbortStuckCCTX)(nil), "zetachain.zetacore.crosschain.MsgAbortStuckCCTX")
	proto.RegisterType((*MsgAbortStuckCCTXResponse)(nil), "zetachain.zetacore.crosschain.MsgAbortStuckCCTXResponse")
	proto.RegisterType((*MsgRefundAbortedCCTX)(nil), "zetachain.zetacore.crosschain.MsgRefundAbortedCCTX")
	proto.RegisterType((*MsgRefundAbortedCCTXResponse)(nil), "zetachain.zetacore.crosschain.MsgRefundAbortedCCTXResponse")
	proto.RegisterType((*MsgUpdateRateLimiterFlags)(nil), "zetachain.zetacore.crosschain.MsgUpdateRateLimiterFlags")
	proto.RegisterType((*MsgUpdateRateLimiterFlagsResponse)(nil), "zetachain.zetacore.crosschain.MsgUpdateRateLimiterFlagsResponse")
	proto.RegisterType((*MsgMigrateERC20CustodyFunds)(nil), "zetachain.zetacore.crosschain.MsgMigrateERC20CustodyFunds")
	proto.RegisterType((*MsgMigrateERC20CustodyFundsResponse)(nil), "zetachain.zetacore.crosschain.MsgMigrateERC20CustodyFundsResponse")
	proto.RegisterType((*MsgUpdateERC20CustodyPauseStatus)(nil), "zetachain.zetacore.crosschain.MsgUpdateERC20CustodyPauseStatus")
	proto.RegisterType((*MsgUpdateERC20CustodyPauseStatusResponse)(nil), "zetachain.zetacore.crosschain.MsgUpdateERC20CustodyPauseStatusResponse")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/crosschain/tx.proto", fileDescriptor_15f0860550897740)
}

var fileDescriptor_15f0860550897740 = []byte{
	// 1689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x36, 0x8e, 0x63, 0x3f, 0x27, 0x4e, 0xba, 0x4d, 0x53, 0x67, 0xd3, 0x38, 0xa9, 0x4b,
	0x43, 0x84, 0x5a, 0x3b, 0x75, 0x4b, 0x29, 0x29, 0xa2, 0x34, 0x6e, 0x9b, 0x06, 0xea, 0x36, 0xda,
	0xa6, 0x80, 0xb8, 0xac, 0xd6, 0xbb, 0x93, 0xcd, 0x2a, 0xf6, 0x8e, 0xb5, 0x33, 0x4e, 0x9d, 0x0a,
	0x09, 0x84, 0x84, 0xc4, 0x11, 0x10, 0xa7, 0x1e, 0xb8, 0x21, 0xc1, 0x37, 0xe9, 0xb1, 0xe2, 0x84,
	0x38, 0x54, 0xa8, 0xfd, 0x02, 0xc0, 0x95, 0x0b, 0xda, 0x99, 0xd9, 0x8d, 0x77, 0xfd, 0x37, 0x8e,
	0x10, 0x97, 0x78, 0xe7, 0xed, 0xfb, 0xff, 0xde, 0xcc, 0xfb, 0xcd, 0x06, 0x96, 0x9f, 0x22, 0xaa,
	0x1b, 0xbb, 0xba, 0xed, 0x14, 0xd8, 0x13, 0x76, 0x51, 0xc1, 0x70, 0x31, 0x21, 0x9c, 0x46, 0x9b,
	0xf9, 0xba, 0x8b, 0x29, 0x96, 0x17, 0x02, 0xbe, 0xbc, 0xcf, 0x97, 0x3f, 0xe4, 0x53, 0x66, 0x2c,
	0x6c, 0x61, 0xc6, 0x59, 0xf0, 0x9e, 0xb8, 0x90, 0xf2, 0x56, 0x07, 0xe5, 0xf5, 0x3d, 0xab, 0xc0,
	0x48, 0x44, 0xfc, 0x08, 0xde, 0xe5, 0x6e, 0xbc, 0xd8, 0x76, 0xd8, 0x9f, 0x3e, 0x3a, 0xeb, 0x2e,
	0xc6, 0x3b, 0x44, 0xfc, 0x08, 0xde, 0x6b, 0xbd, 0x83, 0x73, 0x75, 0x8a, 0xb4, 0xaa, 0x5d, 0xb3,
	0x29, 0x72, 0xb5, 0x9d, 0xaa, 0x6e, 0x09, 0xb9, 0xdc, 0xf7, 0x12, 0xc8, 0x65, 0x62, 0x95, 0x6d,
	0xcb, 0x63, 0xd9, 0x26, 0xe4, 0x6e, 0xc3, 0x31, 0x89, 0x9c, 0x81, 0x71, 0xc3, 0x45, 0x3a, 0xc5,
	0x6e, 0x46, 0x5a, 0x92, 0x56, 0x92, 0xaa, 0xbf, 0x94, 0xe7, 0x20, 0xc1, 0x54, 0x6a, 0xb6, 0x99,
	0x39, 0xb1, 0x24, 0xad, 0x8c, 0xaa, 0xe3, 0x6c, 0xbd, 0x69, 0xca, 0x1b, 0x10, 0xd7, 0x6b, 0xb8,
	0xe1, 0xd0, 0xcc, 0xa8, 0x27, 0xb3, 0x5e, 0x78, 0xfe, 0x72, 0x71, 0xe4, 0xf7, 0x97, 0x8b, 0x6f,
	0x5a, 0x36, 0xdd, 0x6d, 0x54, 0xf2, 0x06, 0xae, 0x15, 0x0c, 0x4c, 0x6a, 0x98, 0x88, 0x9f, 0x4b,
	0xc4, 0xdc, 0x2b, 0xd0, 0x83, 0x3a, 0x22, 0xf9, 0xc7, 0xb6, 0x43, 0x55, 0x21, 0x9e, 0x3b, 0x0b,
	0x4a, 0xbb, 0x4f, 0x2a, 0x22, 0x75, 0xec, 0x10, 0x94, 0x7b, 0x00, 0xa7, 0xca, 0xc4, 0x7a, 0x5c,
	0x37, 0xf9, 0xcb, 0x5b, 0xa6, 0xe9, 0x22, 0xd2, 0xcb, 0xe5, 0x05, 0x00, 0x4a, 0x88, 0x56, 0x6f,
	0x54, 0xf6, 0xd0, 0x01, 0x73, 0x3a, 0xa9, 0x26, 0x29, 0x21, 0x5b, 0x8c, 0x90, 0x5b, 0x80, 0xf9,
	0x0e, 0xfa, 0x02, 0x73, 0x3f, 0x9e, 0x80, 0x99, 0x32, 0xb1, 0x6e, 0x99, 0xe6, 0xa6, 0x53, 0xc1,
	0x0d, 0xc7, 0xdc, 0x76, 0x75, 0x63, 0x0f, 0xb9, 0xc3, 0xe5, 0xe8, 0x0c, 0x8c, 0xd3, 0xa6, 0xb6,
	0xab, 0x93, 0x5d, 0x9e, 0x24, 0x35, 0x4e, 0x9b, 0xf7, 0x74, 0xb2, 0x2b, 0xaf, 0x43, 0xd2, 0x2b,
	0xbd, 0xe6, 0xa5, 0x23, 0x13, 0x5b, 0x92, 0x56, 0xd2, 0xc5, 0x0b, 0xf9, 0x0e, 0x9d, 0x58, 0xdf,
	0xb3, 0xf2, 0xac, 0x47, 0x4a, 0xd8, 0x76, 0xb6, 0x0f, 0xea, 0x48, 0x4d, 0x18, 0xe2, 0x49, 0x5e,
	0x83, 0x31, 0xd6, 0x14, 0x99, 0xb1, 0x25, 0x69, 0x25, 0x55, 0x7c, 0xa3, 0x9b, 0xbc, 0xe8, 0x9c,
	0x2d, 0xef, 0x47, 0xe5, 0x22, 0x5e, 0x92, 0x2a, 0x55, 0x6c, 0xec, 0x71, 0xdf, 0xe2, 0x3c, 0x49,
	0x8c, 0xc2, 0xdc, 0x9b, 0x83, 0x04, 0x6d, 0x6a, 0xb6, 0x63, 0xa2, 0x66, 0x66, 0x9c, 0x87, 0x44,
	0x9b, 0x9b, 0xde, 0x32, 0x97, 0x85, 0xb3, 0x9d, 0xf2, 0x13, 0x24, 0xf0, 0x57, 0x09, 0x4e, 0x96,
	0x89, 0xf5, 0xc9, 0xae, 0x4d, 0x51, 0xd5, 0x26, 0xf4, 0x8e, 0x5a, 0x2a, 0xae, 0xf6, 0xc8, 0xde,
	0x79, 0x98, 0x44, 0xae, 0x51, 0x5c, 0xd5, 0x74, 0x5e, 0x09, 0x51, 0xb1, 0x09, 0x46, 0xf4, 0xab,
	0xdd, 0x9a, 0xe2, 0xd1, 0x70, 0x8a, 0x65, 0x88, 0x39, 0x7a, 0x8d, 0x27, 0x31, 0xa9, 0xb2, 0x67,
	0x79, 0x16, 0xe2, 0xe4, 0xa0, 0x56, 0xc1, 0x55, 0x96, 0x9a, 0xa4, 0x2a, 0x56, 0xb2, 0x02, 0x09,
	0x13, 0x19, 0x76, 0x4d, 0xaf, 0x12, 0x16, 0xf3, 0xa4, 0x1a, 0xac, 0xe5, 0x79, 0x48, 0x5a, 0x3a,
	0xe1, 0xbb, 0x46, 0xc4, 0x9c, 0xb0, 0x74, 0x72, 0xdf, 0x5b, 0xe7, 0x34, 0x98, 0x6b, 0x8b, 0xc9,
	0x8f, 0xd8, 0x8b, 0xe0, 0x69, 0x28, 0x02, 0x1e, 0xe1, 0xc4, 0xd3, 0xd6, 0x08, 0x16, 0x00, 0x0c,
	0x23, 0xc8, 0xa9, 0xe8, 0x4a, 0x8f, 0xc2, 0xb3, 0xfa, 0x97, 0x04, 0xa7, 0x79, 0x5a, 0x1f, 0x36,
	0xe8, 0xf1, 0xfb, 0x6e, 0x06, 0xc6, 0x1c, 0xec, 0x18, 0x88, 0x25, 0x2b, 0xa6, 0xf2, 0x45, 0x6b,
	0x37, 0xc6, 0x42, 0xdd, 0xf8, 0xff, 0x74, 0xd2, 0xfb, 0xb0, 0xd0, 0x31, 0xe4, 0x20, 0xb1, 0x0b,
	0x00, 0x36, 0xd1, 0x5c, 0x54, 0xc3, 0xfb, 0xc8, 0x64, 0xd1, 0x27, 0xd4, 0xa4, 0x4d, 0x54, 0x4e,
	0xc8, 0x21, 0xc8, 0x94, 0x89, 0xc5, 0x57, 0xff, 0x5d, 0xd6, 0x72, 0x39, 0x58, 0xea, 0x66, 0x26,
	0x68, 0xfa, 0x9f, 0x25, 0x98, 0x2a, 0x13, 0xeb, 0x63, 0x4c, 0xd1, 0x86, 0x4e, 0xb6, 0x5c, 0xdb,
	0x40, 0x43, 0xbb, 0x50, 0xf7, 0xa4, 0x7d, 0x17, 0xd8, 0x42, 0x3e, 0x07, 0x13, 0x75, 0xd7, 0xc6,
	0xae, 0x4d, 0x0f, 0xb4, 0x1d, 0x84, 0x58, 0x96, 0x63, 0x6a, 0xca, 0xa7, 0xdd, 0x45, 0x8c, 0x85,
	0x97, 0xc1, 0x69, 0xd4, 0x2a, 0xc8, 0x65, 0x05, 0x8e, 0xa9, 0x29, 0x46, 0x7b, 0xc0, 0x48, 0x1f,
	0xc6, 0x12, 0x63, 0xd3, 0xf1, 0xdc, 0x1c, 0x9c, 0x89, 0x78, 0x1a, 0x44, 0xf1, 0x53, 0x3c, 0x88,
	0xc2, 0x0f, 0xb4, 0x47, 0x14, 0xf3, 0xc0, 0xfa, 0x97, 0xd7, 0x9d, 0x37, 0x74, 0xc2, 0x23, 0xb0,
	0xb2, 0x5f, 0x85, 0x59, 0x5c, 0x21, 0xc8, 0xdd, 0x47, 0xa6, 0x86, 0x85, 0xae, 0xd6, 0x73, 0x70,
	0xc6, 0x7f, 0xeb, 0x1b, 0x62, 0x52, 0x25, 0xc8, 0xb6, 0x4b, 0x89, 0xee, 0x42, 0xb6, 0xb5, 0x4b,
	0x45, 0x58, 0xf3, 0x51, 0xe9, 0x75, 0xd6, 0x6f, 0x8c, 0x45, 0xbe, 0x01, 0x4a, 0xbb, 0x12, 0x6f,
	0x6b, 0x37, 0x08, 0x32, 0x33, 0xc0, 0x14, 0x9c, 0x89, 0x2a, 0xd8, 0xd0, 0xc9, 0x63, 0x82, 0x4c,
	0xf9, 0x4b, 0x09, 0x2e, 0xb4, 0x4b, 0xa3, 0x9d, 0x1d, 0x64, 0x50, 0x7b, 0x1f, 0x31, 0x3d, 0xbc,
	0x40, 0x29, 0x36, 0xf4, 0xf2, 0x62, 0xe8, 0x2d, 0x0f, 0x30, 0xf4, 0x36, 0x1d, 0xaa, 0x9e, 0x8b,
	0x1a, 0xbe, 0xe3, 0xab, 0x0e, 0xfa, 0x66, 0xab, 0xbf, 0x07, 0xfc, 0x90, 0x9a, 0x60, 0xa1, 0xf4,
	0xd4, 0xc8, 0x4e, 0x2f, 0x19, 0x43, 0x7a, 0x5f, 0xaf, 0x36, 0x90, 0xe6, 0x22, 0x03, 0xd9, 0xde,
	0x5e, 0x62, 0xc7, 0xe2, 0xfa, 0xbd, 0x23, 0x4e, 0xec, 0xbf, 0x5f, 0x2e, 0x9e, 0x3e, 0xd0, 0x6b,
	0xd5, 0xb5, 0x5c, 0x58, 0x5d, 0x4e, 0x9d, 0x64, 0x04, 0x55, 0xac, 0xe5, 0xdb, 0x10, 0x27, 0x54,
	0xa7, 0x0d, 0x7e, 0xca, 0xa6, 0x8b, 0x17, 0xbb, 0x8e, 0x36, 0x0e, 0x94, 0x84, 0xe0, 0x23, 0x26,
	0xa3, 0x0a, 0x59, 0xf9, 0x02, 0xa4, 0x83, 0xf8, 0x19, 0xa3, 0x38, 0x40, 0x26, 0x7d, 0x6a, 0xc9,
	0x23, 0xca, 0x17, 0x41, 0x0e, 0xd8, 0xbc, 0xc1, 0xcf, 0xb7, 0x70, 0x82, 0x25, 0x67, 0xda, 0x7f,
	0xb3, 0x4d, 0xc8, 0x03, 0x76, 0x06, 0x86, 0x06, 0x6f, 0x72, 0xa8, 0xc1, 0xdb, 0xb2, 0x85, 0xfc,
	0x9c, 0x07, 0x5b, 0xe8, 0x59, 0x0c, 0xd2, 0xe2, 0x9d, 0x98, 0x8f, 0x3d, 0x76, 0x90, 0x37, 0xa6,
	0x90, 0x63, 0x22, 0x57, 0x6c, 0x1f, 0xb1, 0x92, 0x97, 0x61, 0x8a, 0x3f, 0x69, 0x91, 0xa1, 0x37,
	0xc9, 0xc9, 0x25, 0x71, 0x58, 0x28, 0x90, 0x10, 0x25, 0x70, 0xc5, 0x81, 0x1e, 0xac, 0xbd, 0xe4,
	0xf9, 0xcf, 0x22, 0x79, 0x63, 0x5c, 0x85, 0x4f, 0xe5, 0xc9, 0x3b, 0x04, 0x71, 0xf1, 0x63, 0x81,
	0x38, 0x2f, 0xca, 0x1a, 0x22, 0x44, 0xb7, 0x78, 0xea, 0x93, 0xaa, 0xbf, 0xf4, 0x4e, 0x26, 0xdb,
	0x69, 0x39, 0x00, 0x92, 0xec, 0x75, 0x4a, 0xd0, 0xd8, 0xbe, 0x5f, 0x85, 0x19, 0x9f, 0x25, 0xb4,
	0xdb, 0xf9, 0x66, 0x95, 0xc5, 0xbb, 0xd6, 0x4d, 0x1e, 0x9a, 0xd6, 0x29, 0xc6, 0x16, 0x4c, 0xeb,
	0x70, 0x8d, 0x27, 0x86, 0x03, 0x57, 0xf3, 0x90, 0xa4, 0x4d, 0x0d, 0xbb, 0xb6, 0x65, 0x3b, 0x99,
	0x49, 0x9e, 0x5c, 0xda, 0x7c, 0xc8, 0xd6, 0xde, 0x29, 0xad, 0x13, 0x82, 0x68, 0x26, 0xcd, 0x5e,
	0xf0, 0x85, 0xbc, 0x08, 0x29, 0xb4, 0x8f, 0x1c, 0x2a, 0xa6, 0xdd, 0x14, 0xf3, 0x0a, 0x18, 0x89,
	0x0f, 0xbc, 0x0c, 0xcc, 0x86, 0x7b, 0x23, 0x68, 0x9b, 0xfb, 0x0c, 0x33, 0xdd, 0xaa, 0x60, 0x97,
	0x3e, 0xa2, 0x0d, 0x63, 0xaf, 0x54, 0xda, 0xfe, 0xb4, 0x37, 0xc4, 0xed, 0x05, 0x26, 0xe6, 0x19,
	0x5a, 0x09, 0x6b, 0x0b, 0x4c, 0xed, 0x33, 0x7c, 0xab, 0xa2, 0x9d, 0x86, 0x63, 0x32, 0x16, 0x64,
	0x1e, 0xcb, 0x1a, 0xef, 0x34, 0x4f, 0x5b, 0x80, 0x7f, 0xf8, 0x11, 0x3f, 0xc9, 0xa9, 0x02, 0x00,
	0x09, 0xdc, 0xd8, 0x66, 0xf7, 0x70, 0xe7, 0x48, 0xcc, 0x6b, 0x0e, 0xcc, 0x55, 0x9d, 0xa2, 0xfb,
	0xfc, 0xfe, 0x72, 0xd7, 0xbb, 0xbe, 0xf4, 0xf0, 0xce, 0x00, 0xb9, 0xfd, 0xba, 0xc3, 0xbc, 0x4c,
	0x15, 0x0b, 0xf9, 0x9e, 0x97, 0xbb, 0x7c, 0xd4, 0xcc, 0x7a, 0xcc, 0x6b, 0x7f, 0x75, 0xda, 0x8d,
	0xd0, 0x73, 0xe7, 0xe1, 0x5c, 0x57, 0xdf, 0x82, 0x08, 0xfe, 0x94, 0xd8, 0xd5, 0x42, 0x5c, 0x64,
	0x18, 0x46, 0x2c, 0x35, 0x08, 0xc5, 0xe6, 0xc1, 0x31, 0x6e, 0x59, 0x79, 0x38, 0xe5, 0xa0, 0x27,
	0x9a, 0xc1, 0x15, 0x45, 0x52, 0x7c, 0xd2, 0x41, 0x4f, 0x84, 0x09, 0x1f, 0x67, 0xb6, 0xc1, 0xe9,
	0x58, 0x07, 0x38, 0x7d, 0xb8, 0xeb, 0xc7, 0x8e, 0x77, 0x75, 0xbb, 0x0d, 0xe7, 0x7b, 0x44, 0xdc,
	0x0a, 0xe4, 0x5a, 0x3a, 0x48, 0x8a, 0xf6, 0x6b, 0x8d, 0x21, 0x2c, 0x9e, 0xdd, 0x56, 0x25, 0x5b,
	0x7a, 0x83, 0x88, 0xa1, 0x30, 0x3c, 0x9a, 0xf2, 0x74, 0xb0, 0x74, 0x25, 0x54, 0xbe, 0xc8, 0x6d,
	0xc2, 0x4a, 0x3f, 0x73, 0x03, 0x7a, 0x5e, 0xfc, 0x27, 0x0d, 0xa3, 0x65, 0x62, 0xc9, 0xdf, 0x48,
	0x20, 0x77, 0xc0, 0xee, 0x57, 0xfb, 0xf4, 0x5f, 0x47, 0xf8, 0xab, 0xbc, 0x37, 0x8c, 0x54, 0xe0,
	0xf1, 0xd7, 0x12, 0x9c, 0x6c, 0xbf, 0xbd, 0x5e, 0x19, 0x48, 0x67, 0x58, 0x48, 0xb9, 0x31, 0x84,
	0x50, 0xe0, 0xc7, 0x77, 0x12, 0x9c, 0xee, 0x8c, 0xcd, 0xdf, 0xe9, 0xaf, 0xb6, 0xa3, 0xa0, 0x72,
	0x73, 0x48, 0xc1, 0xc0, 0xa7, 0x7d, 0x98, 0x08, 0x41, 0xf4, 0x7c, 0x7f, 0x85, 0xad, 0xfc, 0xca,
	0xb5, 0xa3, 0xf1, 0x47, 0xed, 0x06, 0xa0, 0x7a, 0x40, 0xbb, 0x3e, 0xff, 0xa0, 0x76, 0xa3, 0x68,
	0x44, 0x26, 0x90, 0x6a, 0x45, 0x22, 0x97, 0x06, 0x53, 0x23, 0xd8, 0x95, 0xb7, 0x8f, 0xc4, 0x1e,
	0x18, 0xfd, 0x1c, 0xd2, 0x91, 0xcb, 0xff, 0x6a, 0x7f, 0x45, 0x61, 0x09, 0xe5, 0xfa, 0x51, 0x25,
	0x02, 0xeb, 0x5f, 0x49, 0x30, 0xdd, 0xf6, 0xb1, 0xa8, 0xd8, 0x5f, 0x5d, 0x54, 0x46, 0x59, 0x3b,
	0xba, 0x4c, 0xe0, 0xc4, 0x17, 0x30, 0x15, 0xfd, 0xc4, 0x76, 0xb9, 0xbf, 0xba, 0x88, 0x88, 0xf2,
	0xee, 0x91, 0x45, 0x5a, 0x6b, 0x10, 0x01, 0x13, 0x03, 0xd4, 0x20, 0x2c, 0x31, 0x48, 0x0d, 0x3a,
	0x43, 0x0c, 0x76, 0x04, 0xb5, 0x03, 0x8c, 0x2b, 0x83, 0xec, 0xde, 0x88, 0xd0, 0x20, 0x47, 0x50,
	0x57, 0x48, 0x21, 0xff, 0x20, 0xc1, 0x6c, 0x17, 0x3c, 0x71, 0x7d, 0xd0, 0xea, 0x46, 0x25, 0x95,
	0x0f, 0x86, 0x95, 0x0c, 0xdc, 0x7a, 0x26, 0x41, 0xa6, 0x2b, 0x48, 0x58, 0x1b, 0xb8, 0xe8, 0x6d,
	0xb2, 0xca, 0xfa, 0xf0, 0xb2, 0x81, 0x73, 0xbf, 0x48, 0xb0, 0xd0, 0x7b, 0x12, 0xdf, 0x1c, 0x34,
	0x01, 0x5d, 0x14, 0x28, 0x1b, 0xc7, 0x54, 0xe0, 0xfb, 0xba, 0xfe, 0xd1, 0xf3, 0x57, 0x59, 0xe9,
	0xc5, 0xab, 0xac, 0xf4, 0xc7, 0xab, 0xac, 0xf4, 0xed, 0xeb, 0xec, 0xc8, 0x8b, 0xd7, 0xd9, 0x91,
	0xdf, 0x5e, 0x67, 0x47, 0x3e, 0xbb, 0xdc, 0x02, 0x64, 0x3c, 0x13, 0x97, 0x22, 0xdf, 0xca, 0x9b,
	0xa1, 0x7f, 0x05, 0x78, 0xb8, 0xa6, 0x12, 0x67, 0x5f, 0xc8, 0xaf, 0xfc, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x00, 0xf4, 0xf1, 0x8e, 0x38, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddOutboundTracker(ctx context.Context, in *MsgAddOutboundTracker, opts ...grpc.CallOption) (*MsgAddOutboundTrackerResponse, error)
	AddInboundTracker(ctx context.Context, in *MsgAddInboundTracker, opts ...grpc.CallOption) (*MsgAddInboundTrackerResponse, error)
	RemoveOutboundTracker(ctx context.Context, in *MsgRemoveOutboundTracker, opts ...grpc.CallOption) (*MsgRemoveOutboundTrackerResponse, error)
	VoteGasPrice(ctx context.Context, in *MsgVoteGasPrice, opts ...grpc.CallOption) (*MsgVoteGasPriceResponse, error)
	VoteOutbound(ctx context.Context, in *MsgVoteOutbound, opts ...grpc.CallOption) (*MsgVoteOutboundResponse, error)
	VoteInbound(ctx context.Context, in *MsgVoteInbound, opts ...grpc.CallOption) (*MsgVoteInboundResponse, error)
	WhitelistERC20(ctx context.Context, in *MsgWhitelistERC20, opts ...grpc.CallOption) (*MsgWhitelistERC20Response, error)
	UpdateTssAddress(ctx context.Context, in *MsgUpdateTssAddress, opts ...grpc.CallOption) (*MsgUpdateTssAddressResponse, error)
	MigrateTssFunds(ctx context.Context, in *MsgMigrateTssFunds, opts ...grpc.CallOption) (*MsgMigrateTssFundsResponse, error)
	AbortStuckCCTX(ctx context.Context, in *MsgAbortStuckCCTX, opts ...grpc.CallOption) (*MsgAbortStuckCCTXResponse, error)
	RefundAbortedCCTX(ctx context.Context, in *MsgRefundAbortedCCTX, opts ...grpc.CallOption) (*MsgRefundAbortedCCTXResponse, error)
	UpdateRateLimiterFlags(ctx context.Context, in *MsgUpdateRateLimiterFlags, opts ...grpc.CallOption) (*MsgUpdateRateLimiterFlagsResponse, error)
	MigrateERC20CustodyFunds(ctx context.Context, in *MsgMigrateERC20CustodyFunds, opts ...grpc.CallOption) (*MsgMigrateERC20CustodyFundsResponse, error)
	UpdateERC20CustodyPauseStatus(ctx context.Context, in *MsgUpdateERC20CustodyPauseStatus, opts ...grpc.CallOption) (*MsgUpdateERC20CustodyPauseStatusResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddOutboundTracker(ctx context.Context, in *MsgAddOutboundTracker, opts ...grpc.CallOption) (*MsgAddOutboundTrackerResponse, error) {
	out := new(MsgAddOutboundTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/AddOutboundTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddInboundTracker(ctx context.Context, in *MsgAddInboundTracker, opts ...grpc.CallOption) (*MsgAddInboundTrackerResponse, error) {
	out := new(MsgAddInboundTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/AddInboundTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveOutboundTracker(ctx context.Context, in *MsgRemoveOutboundTracker, opts ...grpc.CallOption) (*MsgRemoveOutboundTrackerResponse, error) {
	out := new(MsgRemoveOutboundTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/RemoveOutboundTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteGasPrice(ctx context.Context, in *MsgVoteGasPrice, opts ...grpc.CallOption) (*MsgVoteGasPriceResponse, error) {
	out := new(MsgVoteGasPriceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/VoteGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOutbound(ctx context.Context, in *MsgVoteOutbound, opts ...grpc.CallOption) (*MsgVoteOutboundResponse, error) {
	out := new(MsgVoteOutboundResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/VoteOutbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteInbound(ctx context.Context, in *MsgVoteInbound, opts ...grpc.CallOption) (*MsgVoteInboundResponse, error) {
	out := new(MsgVoteInboundResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/VoteInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WhitelistERC20(ctx context.Context, in *MsgWhitelistERC20, opts ...grpc.CallOption) (*MsgWhitelistERC20Response, error) {
	out := new(MsgWhitelistERC20Response)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/WhitelistERC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTssAddress(ctx context.Context, in *MsgUpdateTssAddress, opts ...grpc.CallOption) (*MsgUpdateTssAddressResponse, error) {
	out := new(MsgUpdateTssAddressResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/UpdateTssAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MigrateTssFunds(ctx context.Context, in *MsgMigrateTssFunds, opts ...grpc.CallOption) (*MsgMigrateTssFundsResponse, error) {
	out := new(MsgMigrateTssFundsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/MigrateTssFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AbortStuckCCTX(ctx context.Context, in *MsgAbortStuckCCTX, opts ...grpc.CallOption) (*MsgAbortStuckCCTXResponse, error) {
	out := new(MsgAbortStuckCCTXResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/AbortStuckCCTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RefundAbortedCCTX(ctx context.Context, in *MsgRefundAbortedCCTX, opts ...grpc.CallOption) (*MsgRefundAbortedCCTXResponse, error) {
	out := new(MsgRefundAbortedCCTXResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/RefundAbortedCCTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRateLimiterFlags(ctx context.Context, in *MsgUpdateRateLimiterFlags, opts ...grpc.CallOption) (*MsgUpdateRateLimiterFlagsResponse, error) {
	out := new(MsgUpdateRateLimiterFlagsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/UpdateRateLimiterFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MigrateERC20CustodyFunds(ctx context.Context, in *MsgMigrateERC20CustodyFunds, opts ...grpc.CallOption) (*MsgMigrateERC20CustodyFundsResponse, error) {
	out := new(MsgMigrateERC20CustodyFundsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/MigrateERC20CustodyFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateERC20CustodyPauseStatus(ctx context.Context, in *MsgUpdateERC20CustodyPauseStatus, opts ...grpc.CallOption) (*MsgUpdateERC20CustodyPauseStatusResponse, error) {
	out := new(MsgUpdateERC20CustodyPauseStatusResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Msg/UpdateERC20CustodyPauseStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddOutboundTracker(context.Context, *MsgAddOutboundTracker) (*MsgAddOutboundTrackerResponse, error)
	AddInboundTracker(context.Context, *MsgAddInboundTracker) (*MsgAddInboundTrackerResponse, error)
	RemoveOutboundTracker(context.Context, *MsgRemoveOutboundTracker) (*MsgRemoveOutboundTrackerResponse, error)
	VoteGasPrice(context.Context, *MsgVoteGasPrice) (*MsgVoteGasPriceResponse, error)
	VoteOutbound(context.Context, *MsgVoteOutbound) (*MsgVoteOutboundResponse, error)
	VoteInbound(context.Context, *MsgVoteInbound) (*MsgVoteInboundResponse, error)
	WhitelistERC20(context.Context, *MsgWhitelistERC20) (*MsgWhitelistERC20Response, error)
	UpdateTssAddress(context.Context, *MsgUpdateTssAddress) (*MsgUpdateTssAddressResponse, error)
	MigrateTssFunds(context.Context, *MsgMigrateTssFunds) (*MsgMigrateTssFundsResponse, error)
	AbortStuckCCTX(context.Context, *MsgAbortStuckCCTX) (*MsgAbortStuckCCTXResponse, error)
	RefundAbortedCCTX(context.Context, *MsgRefundAbortedCCTX) (*MsgRefundAbortedCCTXResponse, error)
	UpdateRateLimiterFlags(context.Context, *MsgUpdateRateLimiterFlags) (*MsgUpdateRateLimiterFlagsResponse, error)
	MigrateERC20CustodyFunds(context.Context, *MsgMigrateERC20CustodyFunds) (*MsgMigrateERC20CustodyFundsResponse, error)
	UpdateERC20CustodyPauseStatus(context.Context, *MsgUpdateERC20CustodyPauseStatus) (*MsgUpdateERC20CustodyPauseStatusResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddOutboundTracker(ctx context.Context, req *MsgAddOutboundTracker) (*MsgAddOutboundTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOutboundTracker not implemented")
}
func (*UnimplementedMsgServer) AddInboundTracker(ctx context.Context, req *MsgAddInboundTracker) (*MsgAddInboundTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInboundTracker not implemented")
}
func (*UnimplementedMsgServer) RemoveOutboundTracker(ctx context.Context, req *MsgRemoveOutboundTracker) (*MsgRemoveOutboundTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOutboundTracker not implemented")
}
func (*UnimplementedMsgServer) VoteGasPrice(ctx context.Context, req *MsgVoteGasPrice) (*MsgVoteGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGasPrice not implemented")
}
func (*UnimplementedMsgServer) VoteOutbound(ctx context.Context, req *MsgVoteOutbound) (*MsgVoteOutboundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOutbound not implemented")
}
func (*UnimplementedMsgServer) VoteInbound(ctx context.Context, req *MsgVoteInbound) (*MsgVoteInboundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteInbound not implemented")
}
func (*UnimplementedMsgServer) WhitelistERC20(ctx context.Context, req *MsgWhitelistERC20) (*MsgWhitelistERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistERC20 not implemented")
}
func (*UnimplementedMsgServer) UpdateTssAddress(ctx context.Context, req *MsgUpdateTssAddress) (*MsgUpdateTssAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTssAddress not implemented")
}
func (*UnimplementedMsgServer) MigrateTssFunds(ctx context.Context, req *MsgMigrateTssFunds) (*MsgMigrateTssFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateTssFunds not implemented")
}
func (*UnimplementedMsgServer) AbortStuckCCTX(ctx context.Context, req *MsgAbortStuckCCTX) (*MsgAbortStuckCCTXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortStuckCCTX not implemented")
}
func (*UnimplementedMsgServer) RefundAbortedCCTX(ctx context.Context, req *MsgRefundAbortedCCTX) (*MsgRefundAbortedCCTXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundAbortedCCTX not implemented")
}
func (*UnimplementedMsgServer) UpdateRateLimiterFlags(ctx context.Context, req *MsgUpdateRateLimiterFlags) (*MsgUpdateRateLimiterFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateLimiterFlags not implemented")
}
func (*UnimplementedMsgServer) MigrateERC20CustodyFunds(ctx context.Context, req *MsgMigrateERC20CustodyFunds) (*MsgMigrateERC20CustodyFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateERC20CustodyFunds not implemented")
}
func (*UnimplementedMsgServer) UpdateERC20CustodyPauseStatus(ctx context.Context, req *MsgUpdateERC20CustodyPauseStatus) (*MsgUpdateERC20CustodyPauseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateERC20CustodyPauseStatus not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddOutboundTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddOutboundTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddOutboundTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/AddOutboundTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddOutboundTracker(ctx, req.(*MsgAddOutboundTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddInboundTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddInboundTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddInboundTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/AddInboundTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddInboundTracker(ctx, req.(*MsgAddInboundTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveOutboundTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveOutboundTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveOutboundTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/RemoveOutboundTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveOutboundTracker(ctx, req.(*MsgRemoveOutboundTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteGasPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/VoteGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteGasPrice(ctx, req.(*MsgVoteGasPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOutbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOutbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOutbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/VoteOutbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOutbound(ctx, req.(*MsgVoteOutbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/VoteInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteInbound(ctx, req.(*MsgVoteInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WhitelistERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWhitelistERC20)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WhitelistERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/WhitelistERC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WhitelistERC20(ctx, req.(*MsgWhitelistERC20))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTssAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTssAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTssAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/UpdateTssAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTssAddress(ctx, req.(*MsgUpdateTssAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MigrateTssFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigrateTssFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateTssFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/MigrateTssFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateTssFunds(ctx, req.(*MsgMigrateTssFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AbortStuckCCTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAbortStuckCCTX)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AbortStuckCCTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/AbortStuckCCTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AbortStuckCCTX(ctx, req.(*MsgAbortStuckCCTX))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RefundAbortedCCTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRefundAbortedCCTX)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RefundAbortedCCTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/RefundAbortedCCTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RefundAbortedCCTX(ctx, req.(*MsgRefundAbortedCCTX))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRateLimiterFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRateLimiterFlags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRateLimiterFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/UpdateRateLimiterFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRateLimiterFlags(ctx, req.(*MsgUpdateRateLimiterFlags))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MigrateERC20CustodyFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigrateERC20CustodyFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateERC20CustodyFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/MigrateERC20CustodyFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateERC20CustodyFunds(ctx, req.(*MsgMigrateERC20CustodyFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateERC20CustodyPauseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateERC20CustodyPauseStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateERC20CustodyPauseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Msg/UpdateERC20CustodyPauseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateERC20CustodyPauseStatus(ctx, req.(*MsgUpdateERC20CustodyPauseStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.crosschain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOutboundTracker",
			Handler:    _Msg_AddOutboundTracker_Handler,
		},
		{
			MethodName: "AddInboundTracker",
			Handler:    _Msg_AddInboundTracker_Handler,
		},
		{
			MethodName: "RemoveOutboundTracker",
			Handler:    _Msg_RemoveOutboundTracker_Handler,
		},
		{
			MethodName: "VoteGasPrice",
			Handler:    _Msg_VoteGasPrice_Handler,
		},
		{
			MethodName: "VoteOutbound",
			Handler:    _Msg_VoteOutbound_Handler,
		},
		{
			MethodName: "VoteInbound",
			Handler:    _Msg_VoteInbound_Handler,
		},
		{
			MethodName: "WhitelistERC20",
			Handler:    _Msg_WhitelistERC20_Handler,
		},
		{
			MethodName: "UpdateTssAddress",
			Handler:    _Msg_UpdateTssAddress_Handler,
		},
		{
			MethodName: "MigrateTssFunds",
			Handler:    _Msg_MigrateTssFunds_Handler,
		},
		{
			MethodName: "AbortStuckCCTX",
			Handler:    _Msg_AbortStuckCCTX_Handler,
		},
		{
			MethodName: "RefundAbortedCCTX",
			Handler:    _Msg_RefundAbortedCCTX_Handler,
		},
		{
			MethodName: "UpdateRateLimiterFlags",
			Handler:    _Msg_UpdateRateLimiterFlags_Handler,
		},
		{
			MethodName: "MigrateERC20CustodyFunds",
			Handler:    _Msg_MigrateERC20CustodyFunds_Handler,
		},
		{
			MethodName: "UpdateERC20CustodyPauseStatus",
			Handler:    _Msg_UpdateERC20CustodyPauseStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetachain/zetacore/crosschain/tx.proto",
}

func (m *MsgMigrateTssFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateTssFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateTssFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMigrateTssFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateTssFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateTssFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTssAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTssAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTssAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TssPubkey) > 0 {
		i -= len(m.TssPubkey)
		copy(dAtA[i:], m.TssPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TssPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTssAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTssAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTssAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddInboundTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddInboundTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddInboundTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddInboundTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddInboundTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddInboundTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWhitelistERC20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWhitelistERC20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWhitelistERC20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.Decimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Erc20Address) > 0 {
		i -= len(m.Erc20Address)
		copy(dAtA[i:], m.Erc20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Erc20Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWhitelistERC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWhitelistERC20Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWhitelistERC20Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Zrc20Address) > 0 {
		i -= len(m.Zrc20Address)
		copy(dAtA[i:], m.Zrc20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zrc20Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOutboundTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOutboundTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOutboundTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOutboundTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOutboundTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOutboundTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRemoved {
		i--
		if m.IsRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveOutboundTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveOutboundTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveOutboundTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveOutboundTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveOutboundTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveOutboundTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteGasPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteGasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteGasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriorityFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PriorityFee))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOutbound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOutbound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOutbound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ObservedOutboundEffectiveGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ObservedOutboundEffectiveGasLimit))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.ObservedOutboundEffectiveGasPrice.Size()
		i -= size
		if _, err := m.ObservedOutboundEffectiveGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.ObservedOutboundGasUsed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ObservedOutboundGasUsed))
		i--
		dAtA[i] = 0x50
	}
	if m.CoinType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x48
	}
	if m.OutboundTssNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutboundTssNonce))
		i--
		dAtA[i] = 0x40
	}
	if m.OutboundChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutboundChain))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.ValueReceived.Size()
		i -= size
		if _, err := m.ValueReceived.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ObservedOutboundBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ObservedOutboundBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObservedOutboundHash) > 0 {
		i -= len(m.ObservedOutboundHash)
		copy(dAtA[i:], m.ObservedOutboundHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObservedOutboundHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxHash) > 0 {
		i -= len(m.CctxHash)
		copy(dAtA[i:], m.CctxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CctxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOutboundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOutboundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOutboundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteInbound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteInbound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteInbound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventIndex))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TxOrigin) > 0 {
		i -= len(m.TxOrigin)
		copy(dAtA[i:], m.TxOrigin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxOrigin)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CoinType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x60
	}
	if m.GasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x58
	}
	if m.InboundBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InboundBlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InboundHash) > 0 {
		i -= len(m.InboundHash)
		copy(dAtA[i:], m.InboundHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InboundHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ReceiverChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceiverChain))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	if m.SenderChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SenderChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteInboundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteInboundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteInboundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAbortStuckCCTX) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAbortStuckCCTX) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAbortStuckCCTX) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAbortStuckCCTXResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAbortStuckCCTXResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAbortStuckCCTXResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRefundAbortedCCTX) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAbortedCCTX) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAbortedCCTX) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundAbortedCCTXResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundAbortedCCTXResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundAbortedCCTXResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimiterFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimiterFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimiterFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RateLimiterFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateLimiterFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateLimiterFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateLimiterFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMigrateERC20CustodyFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateERC20CustodyFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateERC20CustodyFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Erc20Address) > 0 {
		i -= len(m.Erc20Address)
		copy(dAtA[i:], m.Erc20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Erc20Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewCustodyAddress) > 0 {
		i -= len(m.NewCustodyAddress)
		copy(dAtA[i:], m.NewCustodyAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewCustodyAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMigrateERC20CustodyFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateERC20CustodyFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateERC20CustodyFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateERC20CustodyPauseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateERC20CustodyPauseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateERC20CustodyPauseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pause {
		i--
		if m.Pause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateERC20CustodyPauseStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateERC20CustodyPauseStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateERC20CustodyPauseStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMigrateTssFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMigrateTssFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTssAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TssPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTssAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddInboundTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovTx(uint64(m.CoinType))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovTx(uint64(m.TxIndex))
	}
	return n
}

func (m *MsgAddInboundTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWhitelistERC20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Erc20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovTx(uint64(m.Decimals))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTx(uint64(m.GasLimit))
	}
	return n
}

func (m *MsgWhitelistERC20Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Zrc20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddOutboundTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovTx(uint64(m.TxIndex))
	}
	return n
}

func (m *MsgAddOutboundTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRemoved {
		n += 2
	}
	return n
}

func (m *MsgRemoveOutboundTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgRemoveOutboundTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteGasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.Price != 0 {
		n += 1 + sovTx(uint64(m.Price))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	if m.PriorityFee != 0 {
		n += 1 + sovTx(uint64(m.PriorityFee))
	}
	return n
}

func (m *MsgVoteGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOutbound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CctxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObservedOutboundHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ObservedOutboundBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.ObservedOutboundBlockHeight))
	}
	l = m.ValueReceived.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.OutboundChain != 0 {
		n += 1 + sovTx(uint64(m.OutboundChain))
	}
	if m.OutboundTssNonce != 0 {
		n += 1 + sovTx(uint64(m.OutboundTssNonce))
	}
	if m.CoinType != 0 {
		n += 1 + sovTx(uint64(m.CoinType))
	}
	if m.ObservedOutboundGasUsed != 0 {
		n += 1 + sovTx(uint64(m.ObservedOutboundGasUsed))
	}
	l = m.ObservedOutboundEffectiveGasPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ObservedOutboundEffectiveGasLimit != 0 {
		n += 1 + sovTx(uint64(m.ObservedOutboundEffectiveGasLimit))
	}
	return n
}

func (m *MsgVoteOutboundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteInbound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SenderChainId != 0 {
		n += 1 + sovTx(uint64(m.SenderChainId))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReceiverChain != 0 {
		n += 1 + sovTx(uint64(m.ReceiverChain))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InboundHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InboundBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.InboundBlockHeight))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTx(uint64(m.GasLimit))
	}
	if m.CoinType != 0 {
		n += 1 + sovTx(uint64(m.CoinType))
	}
	l = len(m.TxOrigin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventIndex != 0 {
		n += 1 + sovTx(uint64(m.EventIndex))
	}
	return n
}

func (m *MsgVoteInboundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAbortStuckCCTX) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAbortStuckCCTXResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRefundAbortedCCTX) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRefundAbortedCCTXResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRateLimiterFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RateLimiterFlags.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateRateLimiterFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMigrateERC20CustodyFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.NewCustodyAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Erc20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMigrateERC20CustodyFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateERC20CustodyPauseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.Pause {
		n += 2
	}
	return n
}

func (m *MsgUpdateERC20CustodyPauseStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMigrateTssFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateTssFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateTssFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateTssFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateTssFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateTssFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTssAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTssAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTssAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTssAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTssAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTssAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddInboundTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddInboundTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddInboundTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddInboundTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddInboundTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddInboundTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWhitelistERC20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWhitelistERC20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWhitelistERC20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWhitelistERC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWhitelistERC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWhitelistERC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOutboundTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOutboundTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOutboundTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOutboundTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOutboundTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOutboundTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveOutboundTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveOutboundTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveOutboundTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveOutboundTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveOutboundTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveOutboundTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteGasPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteGasPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteGasPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityFee", wireType)
			}
			m.PriorityFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriorityFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOutbound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOutbound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOutbound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutboundHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedOutboundHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutboundBlockHeight", wireType)
			}
			m.ObservedOutboundBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutboundBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValueReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= chains.ReceiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundChain", wireType)
			}
			m.OutboundChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundChain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTssNonce", wireType)
			}
			m.OutboundTssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutboundGasUsed", wireType)
			}
			m.ObservedOutboundGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutboundGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutboundEffectiveGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObservedOutboundEffectiveGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutboundEffectiveGasLimit", wireType)
			}
			m.ObservedOutboundEffectiveGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutboundEffectiveGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOutboundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOutboundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOutboundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteInbound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteInbound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteInbound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChainId", wireType)
			}
			m.SenderChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			m.ReceiverChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverChain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundBlockHeight", wireType)
			}
			m.InboundBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIndex", wireType)
			}
			m.EventIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteInboundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteInboundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteInboundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAbortStuckCCTX) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAbortStuckCCTX: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAbortStuckCCTX: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAbortStuckCCTXResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAbortStuckCCTXResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAbortStuckCCTXResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundAbortedCCTX) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAbortedCCTX: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAbortedCCTX: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundAbortedCCTXResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundAbortedCCTXResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundAbortedCCTXResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimiterFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimiterFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateLimiterFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateLimiterFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateERC20CustodyFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateERC20CustodyFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateERC20CustodyFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCustodyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCustodyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateERC20CustodyFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateERC20CustodyFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateERC20CustodyFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateERC20CustodyPauseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateERC20CustodyPauseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateERC20CustodyPauseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pause = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateERC20CustodyPauseStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateERC20CustodyPauseStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateERC20CustodyPauseStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
