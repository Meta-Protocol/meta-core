// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/crosschain/legacy_msgs.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	chains "github.com/zeta-chain/node/pkg/chains"
	coin "github.com/zeta-chain/node/pkg/coin"
	proofs "github.com/zeta-chain/node/pkg/proofs"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// legacy MsgAddOutboundTracker
// defined to keep codec compatibility
type MsgAddToOutTxTracker struct {
	Creator   string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId   int64         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce     uint64        `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TxHash    string        `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,7,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *MsgAddToOutTxTracker) Reset()         { *m = MsgAddToOutTxTracker{} }
func (m *MsgAddToOutTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgAddToOutTxTracker) ProtoMessage()    {}
func (*MsgAddToOutTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_246a7cc819884e07, []int{0}
}
func (m *MsgAddToOutTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToOutTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToOutTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToOutTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToOutTxTracker.Merge(m, src)
}
func (m *MsgAddToOutTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToOutTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToOutTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToOutTxTracker proto.InternalMessageInfo

func (m *MsgAddToOutTxTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddToOutTxTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddToOutTxTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgAddToOutTxTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgAddToOutTxTracker) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddToOutTxTracker) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MsgAddToOutTxTracker) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

// legacy MsgAddInboundTracker
// defined to keep codec compatibility
type MsgAddToInTxTracker struct {
	Creator   string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId   int64         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash    string        `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	CoinType  coin.CoinType `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,7,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *MsgAddToInTxTracker) Reset()         { *m = MsgAddToInTxTracker{} }
func (m *MsgAddToInTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgAddToInTxTracker) ProtoMessage()    {}
func (*MsgAddToInTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_246a7cc819884e07, []int{1}
}
func (m *MsgAddToInTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToInTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToInTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToInTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToInTxTracker.Merge(m, src)
}
func (m *MsgAddToInTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToInTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToInTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToInTxTracker proto.InternalMessageInfo

func (m *MsgAddToInTxTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddToInTxTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddToInTxTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgAddToInTxTracker) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func (m *MsgAddToInTxTracker) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddToInTxTracker) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MsgAddToInTxTracker) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

// legacy MsgRemoveOutboundTracker
// defined to keep codec compatibility
type MsgRemoveFromOutTxTracker struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce   uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgRemoveFromOutTxTracker) Reset()         { *m = MsgRemoveFromOutTxTracker{} }
func (m *MsgRemoveFromOutTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFromOutTxTracker) ProtoMessage()    {}
func (*MsgRemoveFromOutTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_246a7cc819884e07, []int{2}
}
func (m *MsgRemoveFromOutTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFromOutTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFromOutTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFromOutTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFromOutTxTracker.Merge(m, src)
}
func (m *MsgRemoveFromOutTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFromOutTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFromOutTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFromOutTxTracker proto.InternalMessageInfo

func (m *MsgRemoveFromOutTxTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveFromOutTxTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgRemoveFromOutTxTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// legacy MsgVoteOutbound
// defined to keep codec compatibility
type MsgVoteOnObservedOutboundTx struct {
	Creator                        string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CctxHash                       string                                  `protobuf:"bytes,2,opt,name=cctx_hash,json=cctxHash,proto3" json:"cctx_hash,omitempty"`
	ObservedOutTxHash              string                                  `protobuf:"bytes,3,opt,name=observed_outTx_hash,json=observedOutTxHash,proto3" json:"observed_outTx_hash,omitempty"`
	ObservedOutTxBlockHeight       uint64                                  `protobuf:"varint,4,opt,name=observed_outTx_blockHeight,json=observedOutTxBlockHeight,proto3" json:"observed_outTx_blockHeight,omitempty"`
	ObservedOutTxGasUsed           uint64                                  `protobuf:"varint,10,opt,name=observed_outTx_gas_used,json=observedOutTxGasUsed,proto3" json:"observed_outTx_gas_used,omitempty"`
	ObservedOutTxEffectiveGasPrice github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,11,opt,name=observed_outTx_effective_gas_price,json=observedOutTxEffectiveGasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"observed_outTx_effective_gas_price"`
	ObservedOutTxEffectiveGasLimit uint64                                  `protobuf:"varint,12,opt,name=observed_outTx_effective_gas_limit,json=observedOutTxEffectiveGasLimit,proto3" json:"observed_outTx_effective_gas_limit,omitempty"`
	ValueReceived                  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=value_received,json=valueReceived,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"value_received" yaml:"value_received"`
	Status                         chains.ReceiveStatus                    `protobuf:"varint,6,opt,name=status,proto3,enum=zetachain.zetacore.pkg.chains.ReceiveStatus" json:"status,omitempty"`
	OutTxChain                     int64                                   `protobuf:"varint,7,opt,name=outTx_chain,json=outTxChain,proto3" json:"outTx_chain,omitempty"`
	OutTxTssNonce                  uint64                                  `protobuf:"varint,8,opt,name=outTx_tss_nonce,json=outTxTssNonce,proto3" json:"outTx_tss_nonce,omitempty"`
	CoinType                       coin.CoinType                           `protobuf:"varint,9,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
}

func (m *MsgVoteOnObservedOutboundTx) Reset()         { *m = MsgVoteOnObservedOutboundTx{} }
func (m *MsgVoteOnObservedOutboundTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedOutboundTx) ProtoMessage()    {}
func (*MsgVoteOnObservedOutboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_246a7cc819884e07, []int{3}
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedOutboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedOutboundTx.Merge(m, src)
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedOutboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedOutboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedOutboundTx proto.InternalMessageInfo

func (m *MsgVoteOnObservedOutboundTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetCctxHash() string {
	if m != nil {
		return m.CctxHash
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxHash() string {
	if m != nil {
		return m.ObservedOutTxHash
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxBlockHeight() uint64 {
	if m != nil {
		return m.ObservedOutTxBlockHeight
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxGasUsed() uint64 {
	if m != nil {
		return m.ObservedOutTxGasUsed
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxEffectiveGasLimit() uint64 {
	if m != nil {
		return m.ObservedOutTxEffectiveGasLimit
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetStatus() chains.ReceiveStatus {
	if m != nil {
		return m.Status
	}
	return chains.ReceiveStatus_created
}

func (m *MsgVoteOnObservedOutboundTx) GetOutTxChain() int64 {
	if m != nil {
		return m.OutTxChain
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetOutTxTssNonce() uint64 {
	if m != nil {
		return m.OutTxTssNonce
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

// legacy MsgVoteInbound
// defined to keep codec compatibility
type MsgVoteOnObservedInboundTx struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChainId int64  `protobuf:"varint,3,opt,name=sender_chain_id,json=senderChainId,proto3" json:"sender_chain_id,omitempty"`
	Receiver      string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain int64  `protobuf:"varint,5,opt,name=receiver_chain,json=receiverChain,proto3" json:"receiver_chain,omitempty"`
	//  string zeta_burnt = 6;
	Amount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	//  string mMint = 7;
	Message       string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	InTxHash      string        `protobuf:"bytes,9,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
	InBlockHeight uint64        `protobuf:"varint,10,opt,name=in_block_height,json=inBlockHeight,proto3" json:"in_block_height,omitempty"`
	GasLimit      uint64        `protobuf:"varint,11,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	CoinType      coin.CoinType `protobuf:"varint,12,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	TxOrigin      string        `protobuf:"bytes,13,opt,name=tx_origin,json=txOrigin,proto3" json:"tx_origin,omitempty"`
	Asset         string        `protobuf:"bytes,14,opt,name=asset,proto3" json:"asset,omitempty"`
	// event index of the sent asset in the observed tx
	EventIndex uint64 `protobuf:"varint,15,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
}

func (m *MsgVoteOnObservedInboundTx) Reset()         { *m = MsgVoteOnObservedInboundTx{} }
func (m *MsgVoteOnObservedInboundTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedInboundTx) ProtoMessage()    {}
func (*MsgVoteOnObservedInboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_246a7cc819884e07, []int{4}
}
func (m *MsgVoteOnObservedInboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedInboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedInboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedInboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedInboundTx.Merge(m, src)
}
func (m *MsgVoteOnObservedInboundTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedInboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedInboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedInboundTx proto.InternalMessageInfo

func (m *MsgVoteOnObservedInboundTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetSenderChainId() int64 {
	if m != nil {
		return m.SenderChainId
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetReceiverChain() int64 {
	if m != nil {
		return m.ReceiverChain
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetInBlockHeight() uint64 {
	if m != nil {
		return m.InBlockHeight
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func (m *MsgVoteOnObservedInboundTx) GetTxOrigin() string {
	if m != nil {
		return m.TxOrigin
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetEventIndex() uint64 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgAddToOutTxTracker)(nil), "zetachain.zetacore.crosschain.MsgAddToOutTxTracker")
	proto.RegisterType((*MsgAddToInTxTracker)(nil), "zetachain.zetacore.crosschain.MsgAddToInTxTracker")
	proto.RegisterType((*MsgRemoveFromOutTxTracker)(nil), "zetachain.zetacore.crosschain.MsgRemoveFromOutTxTracker")
	proto.RegisterType((*MsgVoteOnObservedOutboundTx)(nil), "zetachain.zetacore.crosschain.MsgVoteOnObservedOutboundTx")
	proto.RegisterType((*MsgVoteOnObservedInboundTx)(nil), "zetachain.zetacore.crosschain.MsgVoteOnObservedInboundTx")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/crosschain/legacy_msgs.proto", fileDescriptor_246a7cc819884e07)
}

var fileDescriptor_246a7cc819884e07 = []byte{
	// 932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xfb, 0x27, 0x8d, 0x5f, 0x37, 0xa9, 0xf0, 0x16, 0xd6, 0x4d, 0xd9, 0xb4, 0x8a, 0xd8,
	0x52, 0x21, 0xea, 0x48, 0x45, 0x70, 0x58, 0x71, 0x21, 0x05, 0xba, 0x41, 0x94, 0xac, 0x4c, 0x96,
	0x03, 0x17, 0x6b, 0x62, 0x4f, 0x9c, 0x51, 0xe2, 0x99, 0xc8, 0x33, 0x89, 0xdc, 0xbd, 0x73, 0xe7,
	0xc6, 0x89, 0xef, 0xb3, 0xc7, 0x3d, 0x22, 0x0e, 0x15, 0x6a, 0xbf, 0x00, 0xe2, 0x13, 0x20, 0xbf,
	0x19, 0xb7, 0x49, 0xd9, 0xb4, 0x50, 0x84, 0xb8, 0x78, 0xe6, 0x3d, 0xbf, 0xdf, 0x9b, 0xf7, 0xde,
	0xbc, 0xdf, 0x1b, 0x68, 0xbe, 0xa4, 0x8a, 0x84, 0x03, 0xc2, 0xb8, 0xde, 0x89, 0x94, 0x36, 0xc3,
	0x54, 0x48, 0xa9, 0x75, 0x23, 0x1a, 0x93, 0xf0, 0x2c, 0x48, 0x64, 0x2c, 0xbd, 0x71, 0x2a, 0x94,
	0x70, 0x1e, 0x5f, 0x01, 0xbc, 0x02, 0xe0, 0x5d, 0x03, 0x6a, 0x5b, 0xb1, 0x88, 0x05, 0x5a, 0x36,
	0xf3, 0x9d, 0x06, 0xd5, 0x3e, 0x78, 0xc3, 0x29, 0xe3, 0x61, 0xdc, 0x44, 0x95, 0x34, 0x8b, 0xb1,
	0xdd, 0x5f, 0x64, 0x2b, 0x18, 0xc7, 0xcf, 0x1d, 0x3e, 0xc7, 0xa9, 0x10, 0x7d, 0x69, 0x16, 0x63,
	0xfb, 0xc9, 0xed, 0x59, 0xa6, 0x44, 0xd1, 0x60, 0xc4, 0x12, 0xa6, 0x68, 0x1a, 0xf4, 0x47, 0xa4,
	0x48, 0xb6, 0x76, 0x74, 0x3b, 0x0e, 0xb7, 0x01, 0xee, 0x03, 0x95, 0x69, 0x4c, 0xe3, 0x77, 0x0b,
	0xb6, 0x4e, 0x65, 0xfc, 0x59, 0x14, 0x75, 0x45, 0x67, 0xa2, 0xba, 0x59, 0x37, 0x25, 0xe1, 0x90,
	0xa6, 0x8e, 0x0b, 0xeb, 0x61, 0x4a, 0x89, 0x12, 0xa9, 0x6b, 0xed, 0x59, 0x07, 0xb6, 0x5f, 0x88,
	0xce, 0x36, 0x94, 0xb5, 0x13, 0x16, 0xb9, 0xcb, 0x7b, 0xd6, 0xc1, 0x8a, 0xbf, 0x8e, 0x72, 0x3b,
	0x72, 0xb6, 0x60, 0x8d, 0x0b, 0x1e, 0x52, 0x77, 0x65, 0xcf, 0x3a, 0x58, 0xf5, 0xb5, 0xe0, 0x3c,
	0x82, 0x75, 0x95, 0x05, 0x03, 0x22, 0x07, 0xee, 0x2a, 0xba, 0x2a, 0xa9, 0xec, 0x19, 0x91, 0x03,
	0xe7, 0x29, 0xac, 0x61, 0xe2, 0xee, 0xda, 0x9e, 0x75, 0xb0, 0x71, 0xf4, 0x9e, 0xf7, 0x86, 0xdb,
	0x1a, 0x0f, 0x63, 0xcf, 0x54, 0xe7, 0x79, 0xbe, 0xf8, 0x1a, 0xe2, 0x3c, 0x06, 0xe8, 0x8d, 0x44,
	0x38, 0xd4, 0x7e, 0x4b, 0xe8, 0xd7, 0x46, 0x0d, 0xba, 0xde, 0x86, 0xb2, 0xca, 0x02, 0xc6, 0x23,
	0x9a, 0xb9, 0xeb, 0x3a, 0x48, 0x95, 0xb5, 0x73, 0xb1, 0xf1, 0xf3, 0x32, 0x3c, 0x2c, 0x52, 0x6e,
	0xf3, 0x7f, 0x99, 0xf1, 0x4c, 0x6e, 0x2b, 0x73, 0xb9, 0xb5, 0xc0, 0xce, 0xaf, 0x3f, 0x50, 0x67,
	0x63, 0x8a, 0x69, 0x57, 0x8f, 0x9e, 0x2c, 0xca, 0x0f, 0xfb, 0xe4, 0x58, 0x30, 0xde, 0x3d, 0x1b,
	0x53, 0xbf, 0x1c, 0x9a, 0xdd, 0xff, 0x54, 0x9f, 0x3e, 0x6c, 0x9f, 0xca, 0xd8, 0xa7, 0x89, 0x98,
	0xd2, 0x2f, 0x53, 0x91, 0xfc, 0x47, 0x6d, 0xd1, 0xf8, 0xa1, 0x04, 0x3b, 0xa7, 0x32, 0xfe, 0x4e,
	0x28, 0xda, 0xe1, 0x9d, 0x9e, 0xa4, 0xe9, 0x94, 0x46, 0x9d, 0x89, 0xea, 0x89, 0x09, 0x8f, 0xba,
	0xd9, 0x2d, 0x47, 0xed, 0x80, 0x1d, 0x86, 0x45, 0xd9, 0x97, 0xf1, 0x5f, 0x39, 0x57, 0x60, 0x66,
	0x1e, 0x3c, 0x14, 0xc6, 0x59, 0x20, 0xf2, 0xd0, 0x67, 0x6f, 0xe7, 0x2d, 0x71, 0x7d, 0x4e, 0x57,
	0xdb, 0x7f, 0x0a, 0xb5, 0x1b, 0xf6, 0xba, 0x4a, 0x94, 0xc5, 0x03, 0x85, 0x37, 0xb7, 0xea, 0xbb,
	0x73, 0xb0, 0xd6, 0xf5, 0x7f, 0xe7, 0x63, 0x78, 0x74, 0x03, 0x1d, 0x13, 0x19, 0x4c, 0x24, 0x8d,
	0x5c, 0x40, 0xe8, 0xd6, 0x1c, 0xf4, 0x84, 0xc8, 0x17, 0x92, 0x46, 0xce, 0x4b, 0x68, 0xdc, 0x80,
	0xd1, 0x7e, 0x9f, 0x86, 0x8a, 0x4d, 0x29, 0x3a, 0x18, 0xa7, 0x2c, 0xa4, 0xee, 0x46, 0x1e, 0x73,
	0xcb, 0x7b, 0x75, 0xbe, 0xbb, 0xf4, 0xeb, 0xf9, 0xee, 0x7e, 0xcc, 0xd4, 0x60, 0xd2, 0xf3, 0x42,
	0x91, 0x34, 0x43, 0x21, 0x13, 0x21, 0xcd, 0x72, 0x28, 0xa3, 0x61, 0x33, 0xef, 0x33, 0xe9, 0xb5,
	0xb9, 0xf2, 0xeb, 0x73, 0x27, 0x7e, 0x51, 0xf8, 0x3d, 0x21, 0xf2, 0x79, 0xee, 0xd5, 0xf9, 0xea,
	0x8e, 0xb3, 0x71, 0xb4, 0xb8, 0x0f, 0x30, 0xfa, 0xc5, 0xbe, 0xbe, 0xce, 0xad, 0x1c, 0x01, 0xd5,
	0x29, 0x19, 0x4d, 0x68, 0x90, 0xd2, 0x90, 0xb2, 0x29, 0x8d, 0xb0, 0x55, 0xed, 0xd6, 0x33, 0x13,
	0xf3, 0xfb, 0x7f, 0x23, 0xe6, 0x17, 0x8c, 0xab, 0x3f, 0xce, 0x77, 0xdf, 0x3e, 0x23, 0xc9, 0xe8,
	0x69, 0x63, 0xde, 0x5d, 0xc3, 0xaf, 0xa0, 0xc2, 0x37, 0xb2, 0xf3, 0x39, 0x94, 0xa4, 0x22, 0x6a,
	0x22, 0xb1, 0xa5, 0xab, 0x47, 0x1f, 0x2e, 0xe4, 0x94, 0x9e, 0xd2, 0x06, 0xf8, 0x2d, 0x62, 0x7c,
	0x83, 0x75, 0x76, 0x61, 0x43, 0x67, 0x8e, 0x56, 0x86, 0x00, 0x80, 0xaa, 0xe3, 0x5c, 0xe3, 0xec,
	0xc3, 0xa6, 0x36, 0x50, 0x52, 0x06, 0xba, 0x77, 0xcb, 0x58, 0x90, 0x0a, 0xaa, 0xbb, 0x52, 0x7e,
	0x83, 0xa3, 0x6d, 0x8e, 0xe5, 0xf6, 0xbd, 0x58, 0xde, 0xf8, 0x69, 0x15, 0x6a, 0x7f, 0xe1, 0x41,
	0x9b, 0xdf, 0x4d, 0x83, 0x77, 0xa0, 0x24, 0x29, 0x8f, 0x68, 0x6a, 0x38, 0x60, 0xa4, 0x3c, 0x78,
	0xbd, 0x0b, 0xae, 0x08, 0xb9, 0x82, 0x19, 0x56, 0xb4, 0xfa, 0xd8, 0xd0, 0xb2, 0x06, 0x65, 0x53,
	0xe7, 0xd4, 0x0c, 0xe6, 0x2b, 0xd9, 0x79, 0x02, 0xd5, 0x62, 0x6f, 0x8a, 0xb4, 0xa6, 0x5d, 0x14,
	0x5a, 0x5d, 0xa7, 0x13, 0x28, 0x91, 0x44, 0x4c, 0xb8, 0xd2, 0x13, 0xa6, 0xd5, 0xfc, 0x87, 0xf7,
	0xee, 0x1b, 0x78, 0x9e, 0x65, 0x42, 0xa5, 0x24, 0xb1, 0x2e, 0xb4, 0xed, 0x17, 0xa2, 0xf3, 0x2e,
	0x00, 0x3e, 0x58, 0x9a, 0xc6, 0xb6, 0x8e, 0x93, 0x71, 0xc3, 0xde, 0x7d, 0xd8, 0x64, 0x3c, 0x30,
	0x93, 0x4e, 0x53, 0x56, 0xf3, 0xae, 0xc2, 0xf8, 0x2c, 0x4f, 0x77, 0xc0, 0xbe, 0xee, 0xed, 0x0d,
	0xb4, 0x28, 0xc7, 0x45, 0x17, 0xcf, 0xdd, 0xe2, 0x83, 0xfb, 0xcd, 0xea, 0x1d, 0xb0, 0x55, 0x16,
	0x88, 0x94, 0xc5, 0x8c, 0xbb, 0x15, 0x1d, 0xa5, 0xca, 0x3a, 0x28, 0xe7, 0x03, 0x90, 0x48, 0x49,
	0x95, 0x5b, 0xc5, 0x1f, 0x5a, 0xc8, 0xbb, 0x90, 0x4e, 0x29, 0x57, 0x66, 0x0c, 0x6f, 0x62, 0x54,
	0x80, 0x2a, 0x9c, 0xc4, 0xad, 0x93, 0x57, 0x17, 0x75, 0xeb, 0xf5, 0x45, 0xdd, 0xfa, 0xed, 0xa2,
	0x6e, 0xfd, 0x78, 0x59, 0x5f, 0x7a, 0x7d, 0x59, 0x5f, 0xfa, 0xe5, 0xb2, 0xbe, 0xf4, 0xfd, 0xe1,
	0x4c, 0x7d, 0xf3, 0xf0, 0x0e, 0xf5, 0x13, 0xcf, 0x45, 0x44, 0x9b, 0xd9, 0xec, 0xa3, 0x8f, 0xa5,
	0xee, 0x95, 0xf0, 0xb1, 0xff, 0xe8, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x35, 0x71, 0x81,
	0x40, 0x09, 0x00, 0x00,
}

func (m *MsgAddToOutTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToOutTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToOutTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacyMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nonce != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddToInTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToInTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToInTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacyMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinType != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFromOutTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFromOutTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFromOutTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedOutboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedOutboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedOutboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ObservedOutTxEffectiveGasLimit != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.ObservedOutTxEffectiveGasLimit))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.ObservedOutTxEffectiveGasPrice.Size()
		i -= size
		if _, err := m.ObservedOutTxEffectiveGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.ObservedOutTxGasUsed != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.ObservedOutTxGasUsed))
		i--
		dAtA[i] = 0x50
	}
	if m.CoinType != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x48
	}
	if m.OutTxTssNonce != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.OutTxTssNonce))
		i--
		dAtA[i] = 0x40
	}
	if m.OutTxChain != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.OutTxChain))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.ValueReceived.Size()
		i -= size
		if _, err := m.ValueReceived.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ObservedOutTxBlockHeight != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.ObservedOutTxBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObservedOutTxHash) > 0 {
		i -= len(m.ObservedOutTxHash)
		copy(dAtA[i:], m.ObservedOutTxHash)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.ObservedOutTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxHash) > 0 {
		i -= len(m.CctxHash)
		copy(dAtA[i:], m.CctxHash)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.CctxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedInboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedInboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedInboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventIndex != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.EventIndex))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TxOrigin) > 0 {
		i -= len(m.TxOrigin)
		copy(dAtA[i:], m.TxOrigin)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.TxOrigin)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CoinType != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x60
	}
	if m.GasLimit != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x58
	}
	if m.InBlockHeight != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.InBlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ReceiverChain != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.ReceiverChain))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	if m.SenderChainId != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.SenderChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacyMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacyMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddToOutTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.Nonce))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.TxIndex))
	}
	return n
}

func (m *MsgAddToInTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.CoinType))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.TxIndex))
	}
	return n
}

func (m *MsgRemoveFromOutTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.Nonce))
	}
	return n
}

func (m *MsgVoteOnObservedOutboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.CctxHash)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.ObservedOutTxHash)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.ObservedOutTxBlockHeight != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.ObservedOutTxBlockHeight))
	}
	l = m.ValueReceived.Size()
	n += 1 + l + sovLegacyMsgs(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.Status))
	}
	if m.OutTxChain != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.OutTxChain))
	}
	if m.OutTxTssNonce != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.OutTxTssNonce))
	}
	if m.CoinType != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.CoinType))
	}
	if m.ObservedOutTxGasUsed != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.ObservedOutTxGasUsed))
	}
	l = m.ObservedOutTxEffectiveGasPrice.Size()
	n += 1 + l + sovLegacyMsgs(uint64(l))
	if m.ObservedOutTxEffectiveGasLimit != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.ObservedOutTxEffectiveGasLimit))
	}
	return n
}

func (m *MsgVoteOnObservedInboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.SenderChainId != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.SenderChainId))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.ReceiverChain != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.ReceiverChain))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLegacyMsgs(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.InBlockHeight != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.InBlockHeight))
	}
	if m.GasLimit != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.GasLimit))
	}
	if m.CoinType != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.CoinType))
	}
	l = len(m.TxOrigin)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	if m.EventIndex != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.EventIndex))
	}
	return n
}

func sovLegacyMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacyMsgs(x uint64) (n int) {
	return sovLegacyMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddToOutTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToOutTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToOutTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacyMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToInTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToInTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToInTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacyMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFromOutTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacyMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedOutboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedOutTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxBlockHeight", wireType)
			}
			m.ObservedOutTxBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutTxBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValueReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= chains.ReceiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxChain", wireType)
			}
			m.OutTxChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTxChain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTssNonce", wireType)
			}
			m.OutTxTssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTxTssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxGasUsed", wireType)
			}
			m.ObservedOutTxGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutTxGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxEffectiveGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObservedOutTxEffectiveGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxEffectiveGasLimit", wireType)
			}
			m.ObservedOutTxEffectiveGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutTxEffectiveGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacyMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedInboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChainId", wireType)
			}
			m.SenderChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			m.ReceiverChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverChain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			m.InBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIndex", wireType)
			}
			m.EventIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacyMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacyMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacyMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacyMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacyMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacyMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacyMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacyMsgs = fmt.Errorf("proto: unexpected end of group")
)
