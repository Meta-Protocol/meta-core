// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/fungible/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetForeignCoinsRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetForeignCoinsRequest) Reset()         { *m = QueryGetForeignCoinsRequest{} }
func (m *QueryGetForeignCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetForeignCoinsRequest) ProtoMessage()    {}
func (*QueryGetForeignCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{0}
}
func (m *QueryGetForeignCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForeignCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForeignCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForeignCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForeignCoinsRequest.Merge(m, src)
}
func (m *QueryGetForeignCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForeignCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForeignCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForeignCoinsRequest proto.InternalMessageInfo

func (m *QueryGetForeignCoinsRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetForeignCoinsResponse struct {
	ForeignCoins ForeignCoins `protobuf:"bytes,1,opt,name=foreignCoins,proto3" json:"foreignCoins"`
}

func (m *QueryGetForeignCoinsResponse) Reset()         { *m = QueryGetForeignCoinsResponse{} }
func (m *QueryGetForeignCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetForeignCoinsResponse) ProtoMessage()    {}
func (*QueryGetForeignCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{1}
}
func (m *QueryGetForeignCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForeignCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForeignCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForeignCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForeignCoinsResponse.Merge(m, src)
}
func (m *QueryGetForeignCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForeignCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForeignCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForeignCoinsResponse proto.InternalMessageInfo

func (m *QueryGetForeignCoinsResponse) GetForeignCoins() ForeignCoins {
	if m != nil {
		return m.ForeignCoins
	}
	return ForeignCoins{}
}

type QueryAllForeignCoinsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllForeignCoinsRequest) Reset()         { *m = QueryAllForeignCoinsRequest{} }
func (m *QueryAllForeignCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllForeignCoinsRequest) ProtoMessage()    {}
func (*QueryAllForeignCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{2}
}
func (m *QueryAllForeignCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllForeignCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllForeignCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllForeignCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllForeignCoinsRequest.Merge(m, src)
}
func (m *QueryAllForeignCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllForeignCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllForeignCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllForeignCoinsRequest proto.InternalMessageInfo

func (m *QueryAllForeignCoinsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllForeignCoinsResponse struct {
	ForeignCoins []ForeignCoins      `protobuf:"bytes,1,rep,name=foreignCoins,proto3" json:"foreignCoins"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllForeignCoinsResponse) Reset()         { *m = QueryAllForeignCoinsResponse{} }
func (m *QueryAllForeignCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllForeignCoinsResponse) ProtoMessage()    {}
func (*QueryAllForeignCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{3}
}
func (m *QueryAllForeignCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllForeignCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllForeignCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllForeignCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllForeignCoinsResponse.Merge(m, src)
}
func (m *QueryAllForeignCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllForeignCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllForeignCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllForeignCoinsResponse proto.InternalMessageInfo

func (m *QueryAllForeignCoinsResponse) GetForeignCoins() []ForeignCoins {
	if m != nil {
		return m.ForeignCoins
	}
	return nil
}

func (m *QueryAllForeignCoinsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSystemContractRequest struct {
}

func (m *QueryGetSystemContractRequest) Reset()         { *m = QueryGetSystemContractRequest{} }
func (m *QueryGetSystemContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemContractRequest) ProtoMessage()    {}
func (*QueryGetSystemContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{4}
}
func (m *QueryGetSystemContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemContractRequest.Merge(m, src)
}
func (m *QueryGetSystemContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemContractRequest proto.InternalMessageInfo

type QueryGetSystemContractResponse struct {
	SystemContract SystemContract `protobuf:"bytes,1,opt,name=SystemContract,proto3" json:"SystemContract"`
}

func (m *QueryGetSystemContractResponse) Reset()         { *m = QueryGetSystemContractResponse{} }
func (m *QueryGetSystemContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemContractResponse) ProtoMessage()    {}
func (*QueryGetSystemContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{5}
}
func (m *QueryGetSystemContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemContractResponse.Merge(m, src)
}
func (m *QueryGetSystemContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemContractResponse proto.InternalMessageInfo

func (m *QueryGetSystemContractResponse) GetSystemContract() SystemContract {
	if m != nil {
		return m.SystemContract
	}
	return SystemContract{}
}

type QueryGetGasStabilityPoolAddress struct {
}

func (m *QueryGetGasStabilityPoolAddress) Reset()         { *m = QueryGetGasStabilityPoolAddress{} }
func (m *QueryGetGasStabilityPoolAddress) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasStabilityPoolAddress) ProtoMessage()    {}
func (*QueryGetGasStabilityPoolAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{6}
}
func (m *QueryGetGasStabilityPoolAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasStabilityPoolAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasStabilityPoolAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasStabilityPoolAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasStabilityPoolAddress.Merge(m, src)
}
func (m *QueryGetGasStabilityPoolAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasStabilityPoolAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasStabilityPoolAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasStabilityPoolAddress proto.InternalMessageInfo

type QueryGetGasStabilityPoolAddressResponse struct {
	CosmosAddress string `protobuf:"bytes,1,opt,name=cosmos_address,json=cosmosAddress,proto3" json:"cosmos_address,omitempty"`
	EvmAddress    string `protobuf:"bytes,2,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *QueryGetGasStabilityPoolAddressResponse) Reset() {
	*m = QueryGetGasStabilityPoolAddressResponse{}
}
func (m *QueryGetGasStabilityPoolAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasStabilityPoolAddressResponse) ProtoMessage()    {}
func (*QueryGetGasStabilityPoolAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{7}
}
func (m *QueryGetGasStabilityPoolAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasStabilityPoolAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasStabilityPoolAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasStabilityPoolAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasStabilityPoolAddressResponse.Merge(m, src)
}
func (m *QueryGetGasStabilityPoolAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasStabilityPoolAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasStabilityPoolAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasStabilityPoolAddressResponse proto.InternalMessageInfo

func (m *QueryGetGasStabilityPoolAddressResponse) GetCosmosAddress() string {
	if m != nil {
		return m.CosmosAddress
	}
	return ""
}

func (m *QueryGetGasStabilityPoolAddressResponse) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

type QueryGetGasStabilityPoolBalance struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetGasStabilityPoolBalance) Reset()         { *m = QueryGetGasStabilityPoolBalance{} }
func (m *QueryGetGasStabilityPoolBalance) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasStabilityPoolBalance) ProtoMessage()    {}
func (*QueryGetGasStabilityPoolBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{8}
}
func (m *QueryGetGasStabilityPoolBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasStabilityPoolBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasStabilityPoolBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasStabilityPoolBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasStabilityPoolBalance.Merge(m, src)
}
func (m *QueryGetGasStabilityPoolBalance) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasStabilityPoolBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasStabilityPoolBalance.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasStabilityPoolBalance proto.InternalMessageInfo

func (m *QueryGetGasStabilityPoolBalance) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetGasStabilityPoolBalanceResponse struct {
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QueryGetGasStabilityPoolBalanceResponse) Reset() {
	*m = QueryGetGasStabilityPoolBalanceResponse{}
}
func (m *QueryGetGasStabilityPoolBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasStabilityPoolBalanceResponse) ProtoMessage()    {}
func (*QueryGetGasStabilityPoolBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{9}
}
func (m *QueryGetGasStabilityPoolBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasStabilityPoolBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasStabilityPoolBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasStabilityPoolBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasStabilityPoolBalanceResponse.Merge(m, src)
}
func (m *QueryGetGasStabilityPoolBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasStabilityPoolBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasStabilityPoolBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasStabilityPoolBalanceResponse proto.InternalMessageInfo

func (m *QueryGetGasStabilityPoolBalanceResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type QueryAllGasStabilityPoolBalance struct {
}

func (m *QueryAllGasStabilityPoolBalance) Reset()         { *m = QueryAllGasStabilityPoolBalance{} }
func (m *QueryAllGasStabilityPoolBalance) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasStabilityPoolBalance) ProtoMessage()    {}
func (*QueryAllGasStabilityPoolBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{10}
}
func (m *QueryAllGasStabilityPoolBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasStabilityPoolBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasStabilityPoolBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasStabilityPoolBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasStabilityPoolBalance.Merge(m, src)
}
func (m *QueryAllGasStabilityPoolBalance) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasStabilityPoolBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasStabilityPoolBalance.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasStabilityPoolBalance proto.InternalMessageInfo

type QueryAllGasStabilityPoolBalanceResponse struct {
	Balances []QueryAllGasStabilityPoolBalanceResponse_Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances"`
}

func (m *QueryAllGasStabilityPoolBalanceResponse) Reset() {
	*m = QueryAllGasStabilityPoolBalanceResponse{}
}
func (m *QueryAllGasStabilityPoolBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasStabilityPoolBalanceResponse) ProtoMessage()    {}
func (*QueryAllGasStabilityPoolBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{11}
}
func (m *QueryAllGasStabilityPoolBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasStabilityPoolBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasStabilityPoolBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse.Merge(m, src)
}
func (m *QueryAllGasStabilityPoolBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasStabilityPoolBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse proto.InternalMessageInfo

func (m *QueryAllGasStabilityPoolBalanceResponse) GetBalances() []QueryAllGasStabilityPoolBalanceResponse_Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type QueryAllGasStabilityPoolBalanceResponse_Balance struct {
	ChainId int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) Reset() {
	*m = QueryAllGasStabilityPoolBalanceResponse_Balance{}
}
func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllGasStabilityPoolBalanceResponse_Balance) ProtoMessage() {}
func (*QueryAllGasStabilityPoolBalanceResponse_Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{11, 0}
}
func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse_Balance.Merge(m, src)
}
func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasStabilityPoolBalanceResponse_Balance proto.InternalMessageInfo

func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type QueryCodeHashRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCodeHashRequest) Reset()         { *m = QueryCodeHashRequest{} }
func (m *QueryCodeHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCodeHashRequest) ProtoMessage()    {}
func (*QueryCodeHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{12}
}
func (m *QueryCodeHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCodeHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCodeHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCodeHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCodeHashRequest.Merge(m, src)
}
func (m *QueryCodeHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCodeHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCodeHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCodeHashRequest proto.InternalMessageInfo

func (m *QueryCodeHashRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryCodeHashResponse struct {
	CodeHash string `protobuf:"bytes,1,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
}

func (m *QueryCodeHashResponse) Reset()         { *m = QueryCodeHashResponse{} }
func (m *QueryCodeHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCodeHashResponse) ProtoMessage()    {}
func (*QueryCodeHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cd9a7c9e94d3c90, []int{13}
}
func (m *QueryCodeHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCodeHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCodeHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCodeHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCodeHashResponse.Merge(m, src)
}
func (m *QueryCodeHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCodeHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCodeHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCodeHashResponse proto.InternalMessageInfo

func (m *QueryCodeHashResponse) GetCodeHash() string {
	if m != nil {
		return m.CodeHash
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryGetForeignCoinsRequest)(nil), "zetachain.zetacore.fungible.QueryGetForeignCoinsRequest")
	proto.RegisterType((*QueryGetForeignCoinsResponse)(nil), "zetachain.zetacore.fungible.QueryGetForeignCoinsResponse")
	proto.RegisterType((*QueryAllForeignCoinsRequest)(nil), "zetachain.zetacore.fungible.QueryAllForeignCoinsRequest")
	proto.RegisterType((*QueryAllForeignCoinsResponse)(nil), "zetachain.zetacore.fungible.QueryAllForeignCoinsResponse")
	proto.RegisterType((*QueryGetSystemContractRequest)(nil), "zetachain.zetacore.fungible.QueryGetSystemContractRequest")
	proto.RegisterType((*QueryGetSystemContractResponse)(nil), "zetachain.zetacore.fungible.QueryGetSystemContractResponse")
	proto.RegisterType((*QueryGetGasStabilityPoolAddress)(nil), "zetachain.zetacore.fungible.QueryGetGasStabilityPoolAddress")
	proto.RegisterType((*QueryGetGasStabilityPoolAddressResponse)(nil), "zetachain.zetacore.fungible.QueryGetGasStabilityPoolAddressResponse")
	proto.RegisterType((*QueryGetGasStabilityPoolBalance)(nil), "zetachain.zetacore.fungible.QueryGetGasStabilityPoolBalance")
	proto.RegisterType((*QueryGetGasStabilityPoolBalanceResponse)(nil), "zetachain.zetacore.fungible.QueryGetGasStabilityPoolBalanceResponse")
	proto.RegisterType((*QueryAllGasStabilityPoolBalance)(nil), "zetachain.zetacore.fungible.QueryAllGasStabilityPoolBalance")
	proto.RegisterType((*QueryAllGasStabilityPoolBalanceResponse)(nil), "zetachain.zetacore.fungible.QueryAllGasStabilityPoolBalanceResponse")
	proto.RegisterType((*QueryAllGasStabilityPoolBalanceResponse_Balance)(nil), "zetachain.zetacore.fungible.QueryAllGasStabilityPoolBalanceResponse.Balance")
	proto.RegisterType((*QueryCodeHashRequest)(nil), "zetachain.zetacore.fungible.QueryCodeHashRequest")
	proto.RegisterType((*QueryCodeHashResponse)(nil), "zetachain.zetacore.fungible.QueryCodeHashResponse")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/fungible/query.proto", fileDescriptor_9cd9a7c9e94d3c90)
}

var fileDescriptor_9cd9a7c9e94d3c90 = []byte{
	// 889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xd1, 0x4e, 0xdb, 0x48,
	0x14, 0x8d, 0x61, 0xd9, 0x84, 0x81, 0x65, 0xa5, 0x11, 0x2b, 0x58, 0xc3, 0x26, 0xbb, 0x16, 0x0b,
	0x6c, 0x60, 0x3d, 0x24, 0xac, 0xb4, 0x2c, 0x1b, 0x55, 0x4d, 0xd2, 0x42, 0x2b, 0xf5, 0x81, 0x86,
	0xa7, 0xf6, 0x25, 0x9a, 0xd8, 0x83, 0x63, 0xc9, 0xf1, 0x84, 0x8c, 0x13, 0x91, 0x46, 0x48, 0x55,
	0xbf, 0xa0, 0x52, 0x3f, 0xa1, 0x3f, 0x50, 0xf5, 0xa5, 0x2f, 0xfd, 0x00, 0x1e, 0x91, 0x2a, 0x55,
	0xed, 0x4b, 0xd5, 0x86, 0x4a, 0xfd, 0x8c, 0x56, 0x19, 0x8f, 0x4d, 0x12, 0xec, 0x24, 0x0d, 0x4f,
	0xf1, 0x8c, 0xef, 0xb9, 0xf7, 0x9c, 0x7b, 0x67, 0x8e, 0x03, 0xd6, 0x1e, 0x11, 0x07, 0x6b, 0x65,
	0x6c, 0xda, 0x88, 0x3f, 0xd1, 0x1a, 0x41, 0x47, 0x75, 0xdb, 0x30, 0x4b, 0x16, 0x41, 0xc7, 0x75,
	0x52, 0x6b, 0xaa, 0xd5, 0x1a, 0x75, 0x28, 0x5c, 0xf2, 0x03, 0x55, 0x2f, 0x50, 0xf5, 0x02, 0xe5,
	0xa4, 0x46, 0x59, 0x85, 0x32, 0x54, 0xc2, 0x4c, 0xa0, 0x50, 0x23, 0x55, 0x22, 0x0e, 0x4e, 0xa1,
	0x2a, 0x36, 0x4c, 0x1b, 0x3b, 0x26, 0xb5, 0xdd, 0x44, 0x32, 0x1a, 0x54, 0xf1, 0x88, 0xd6, 0x88,
	0x69, 0xd8, 0x45, 0x8d, 0x9a, 0x36, 0x13, 0x80, 0xd4, 0x20, 0x00, 0x6b, 0x32, 0x87, 0x54, 0x8a,
	0x1a, 0xb5, 0x9d, 0x1a, 0xd6, 0x1c, 0x01, 0x99, 0x37, 0xa8, 0x41, 0xf9, 0x23, 0xea, 0x3c, 0x89,
	0xdd, 0x65, 0x83, 0x52, 0xc3, 0x22, 0x08, 0x57, 0x4d, 0x84, 0x6d, 0x9b, 0x3a, 0x9c, 0x96, 0x57,
	0x66, 0x41, 0x68, 0xa8, 0x30, 0x03, 0x35, 0x52, 0x9d, 0x1f, 0xf7, 0x85, 0xb2, 0x0d, 0x96, 0xee,
	0x77, 0x24, 0xed, 0x13, 0x67, 0xcf, 0xa5, 0x97, 0xef, 0xb0, 0x2b, 0x90, 0xe3, 0x3a, 0x61, 0x0e,
	0x9c, 0x07, 0x53, 0xa6, 0xad, 0x93, 0x93, 0x45, 0xe9, 0x77, 0x69, 0x7d, 0xba, 0xe0, 0x2e, 0x14,
	0x06, 0x96, 0x83, 0x41, 0xac, 0x4a, 0x6d, 0x46, 0xe0, 0x21, 0x98, 0x3d, 0xea, 0xda, 0xe7, 0xe0,
	0x99, 0xf4, 0x5f, 0xea, 0x80, 0x2e, 0xab, 0xdd, 0x89, 0x72, 0x3f, 0x9c, 0x7d, 0x48, 0x44, 0x0a,
	0x3d, 0x49, 0x14, 0x22, 0x98, 0x66, 0x2d, 0x2b, 0x88, 0xe9, 0x1e, 0x00, 0x97, 0xd3, 0x10, 0x15,
	0x57, 0x55, 0x57, 0xb6, 0xda, 0x19, 0x9d, 0xea, 0x0e, 0x5c, 0x8c, 0x4e, 0x3d, 0xc0, 0x06, 0x11,
	0xd8, 0x42, 0x17, 0x52, 0x79, 0x2d, 0x09, 0x71, 0x57, 0xea, 0x84, 0x8a, 0x9b, 0xbc, 0xb6, 0x38,
	0xb8, 0xdf, 0xc3, 0x7e, 0x82, 0xb3, 0x5f, 0x1b, 0xca, 0xde, 0x65, 0xd4, 0x43, 0x3f, 0x01, 0x7e,
	0xf3, 0x46, 0x73, 0xc8, 0x4f, 0x4f, 0x5e, 0x1c, 0x1e, 0xa1, 0x55, 0x69, 0x81, 0x78, 0x58, 0x80,
	0x10, 0xf8, 0x00, 0xcc, 0xf5, 0xbe, 0x11, 0xdd, 0xdc, 0x18, 0x28, 0xb1, 0x17, 0x22, 0x44, 0xf6,
	0x25, 0x52, 0xfe, 0x00, 0x09, 0xaf, 0xf8, 0x3e, 0x66, 0x87, 0x0e, 0x2e, 0x99, 0x96, 0xe9, 0x34,
	0x0f, 0x28, 0xb5, 0xb2, 0xba, 0x5e, 0x23, 0x8c, 0x29, 0xc7, 0x60, 0x6d, 0x48, 0x88, 0x4f, 0xf4,
	0x4f, 0x30, 0xe7, 0x76, 0xa8, 0x88, 0xdd, 0x37, 0xe2, 0x94, 0xfe, 0xe4, 0xee, 0x8a, 0x70, 0x98,
	0x00, 0x33, 0xa4, 0x51, 0xf1, 0x63, 0x26, 0x78, 0x0c, 0x20, 0x8d, 0x8a, 0x57, 0x32, 0x13, 0xce,
	0x2a, 0x87, 0x2d, 0x6c, 0x6b, 0x04, 0xfe, 0x0a, 0x62, 0x5c, 0x78, 0xd1, 0xd4, 0x79, 0x91, 0xc9,
	0x42, 0x94, 0xaf, 0xef, 0xea, 0x4a, 0x3e, 0x9c, 0xb0, 0x40, 0xfb, 0x84, 0x17, 0x41, 0xb4, 0xe4,
	0x6e, 0x09, 0x16, 0xde, 0xd2, 0x6f, 0x4c, 0xd6, 0xb2, 0x42, 0x92, 0x28, 0xef, 0x25, 0x51, 0x28,
	0x3c, 0xc6, 0x2f, 0x64, 0x83, 0x98, 0xc8, 0xec, 0x9d, 0xcf, 0x7b, 0x03, 0x87, 0x37, 0x62, 0x5e,
	0x55, 0xac, 0xc5, 0x74, 0xfd, 0x1a, 0xf2, 0x0d, 0x10, 0x1d, 0xde, 0xa9, 0x01, 0xf2, 0xb7, 0xc0,
	0x3c, 0xa7, 0x90, 0xa7, 0x3a, 0xb9, 0x83, 0x59, 0xd9, 0xbb, 0xd4, 0x8b, 0x20, 0xda, 0x3b, 0x5a,
	0x6f, 0xa9, 0xfc, 0x03, 0x7e, 0xe9, 0x43, 0x08, 0xe9, 0x4b, 0x60, 0x5a, 0xa3, 0x3a, 0x29, 0x96,
	0x31, 0x2b, 0x0b, 0x50, 0x4c, 0x13, 0x41, 0xe9, 0xaf, 0x00, 0x4c, 0x71, 0x18, 0x7c, 0x25, 0x81,
	0xd9, 0xee, 0x5b, 0x09, 0x77, 0x86, 0x37, 0x28, 0xd8, 0x23, 0xe5, 0xff, 0xc6, 0x40, 0xba, 0x64,
	0x95, 0xf4, 0x93, 0x37, 0x9f, 0x9f, 0x4d, 0x6c, 0xc2, 0x24, 0x37, 0xff, 0xbf, 0xdd, 0xef, 0x40,
	0xf0, 0xf7, 0x02, 0xb5, 0xb8, 0xf7, 0x9e, 0xc2, 0x97, 0x12, 0xf8, 0xb9, 0x3b, 0x59, 0xd6, 0xb2,
	0x46, 0x21, 0x1f, 0x6c, 0x9b, 0xa3, 0x90, 0x0f, 0x31, 0x42, 0x25, 0xc9, 0xc9, 0xaf, 0x40, 0x65,
	0x38, 0xf9, 0x4e, 0xbb, 0xfb, 0xbc, 0x00, 0xee, 0x8e, 0xd4, 0xb6, 0x40, 0x13, 0x93, 0xff, 0x1f,
	0x0b, 0x2b, 0x78, 0x6f, 0x72, 0xde, 0xab, 0x70, 0x25, 0x90, 0x77, 0xdf, 0x37, 0x17, 0xbe, 0x95,
	0xc0, 0x42, 0x88, 0x11, 0xc1, 0xcc, 0x48, 0x34, 0x42, 0xd0, 0xf2, 0xad, 0xeb, 0xa0, 0x7d, 0x35,
	0xff, 0x72, 0x35, 0x29, 0x88, 0x02, 0xd5, 0x18, 0x98, 0x15, 0x99, 0x07, 0x2f, 0x56, 0x29, 0xb5,
	0x3c, 0x1f, 0x84, 0x9f, 0x02, 0x84, 0x79, 0x97, 0x78, 0x3c, 0x61, 0x02, 0x3d, 0xa6, 0xb0, 0x3e,
	0xaf, 0x51, 0x72, 0x5c, 0x58, 0x06, 0xee, 0x8e, 0x2a, 0x4c, 0x98, 0x09, 0x6a, 0x79, 0xfe, 0x73,
	0x0a, 0xdb, 0x12, 0x90, 0x43, 0xea, 0x74, 0xae, 0x4d, 0xe6, 0x3a, 0xa6, 0x38, 0x8a, 0xcc, 0xe1,
	0x96, 0xaa, 0xdc, 0xe4, 0x32, 0x77, 0xe1, 0x4e, 0xb7, 0xcc, 0xab, 0x7f, 0x05, 0xc3, 0xf5, 0xc2,
	0xe7, 0x12, 0x88, 0x79, 0x36, 0x08, 0x53, 0xc3, 0x49, 0xf5, 0x99, 0xac, 0x9c, 0xfe, 0x1e, 0x88,
	0x60, 0xbd, 0xc5, 0x59, 0x27, 0xe1, 0x7a, 0xe0, 0x70, 0x7c, 0x03, 0x46, 0x2d, 0x71, 0xda, 0x4e,
	0xe5, 0xa9, 0xc7, 0x5f, 0x5e, 0x24, 0xa5, 0xdc, 0xed, 0xb3, 0x76, 0x5c, 0x3a, 0x6f, 0xc7, 0xa5,
	0x8f, 0xed, 0xb8, 0xf4, 0xf4, 0x22, 0x1e, 0x39, 0xbf, 0x88, 0x47, 0xde, 0x5d, 0xc4, 0x23, 0x0f,
	0x37, 0x0c, 0xd3, 0x29, 0xd7, 0x4b, 0xaa, 0x46, 0x2b, 0xdd, 0x49, 0x6d, 0xaa, 0x13, 0x74, 0x72,
	0x99, 0xdb, 0x69, 0x56, 0x09, 0x2b, 0xfd, 0xc8, 0xff, 0xbd, 0x6e, 0x7f, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x8f, 0x9d, 0x05, 0x74, 0xe2, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a ForeignCoins by index.
	ForeignCoins(ctx context.Context, in *QueryGetForeignCoinsRequest, opts ...grpc.CallOption) (*QueryGetForeignCoinsResponse, error)
	// Queries a list of ForeignCoins items.
	ForeignCoinsAll(ctx context.Context, in *QueryAllForeignCoinsRequest, opts ...grpc.CallOption) (*QueryAllForeignCoinsResponse, error)
	// Queries SystemContract
	SystemContract(ctx context.Context, in *QueryGetSystemContractRequest, opts ...grpc.CallOption) (*QueryGetSystemContractResponse, error)
	// Queries the address of a gas stability pool on a given chain.
	GasStabilityPoolAddress(ctx context.Context, in *QueryGetGasStabilityPoolAddress, opts ...grpc.CallOption) (*QueryGetGasStabilityPoolAddressResponse, error)
	// Queries the balance of a gas stability pool on a given chain.
	GasStabilityPoolBalance(ctx context.Context, in *QueryGetGasStabilityPoolBalance, opts ...grpc.CallOption) (*QueryGetGasStabilityPoolBalanceResponse, error)
	// Queries all gas stability pool balances.
	GasStabilityPoolBalanceAll(ctx context.Context, in *QueryAllGasStabilityPoolBalance, opts ...grpc.CallOption) (*QueryAllGasStabilityPoolBalanceResponse, error)
	// Code hash query the code hash of a contract.
	CodeHash(ctx context.Context, in *QueryCodeHashRequest, opts ...grpc.CallOption) (*QueryCodeHashResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ForeignCoins(ctx context.Context, in *QueryGetForeignCoinsRequest, opts ...grpc.CallOption) (*QueryGetForeignCoinsResponse, error) {
	out := new(QueryGetForeignCoinsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Query/ForeignCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ForeignCoinsAll(ctx context.Context, in *QueryAllForeignCoinsRequest, opts ...grpc.CallOption) (*QueryAllForeignCoinsResponse, error) {
	out := new(QueryAllForeignCoinsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Query/ForeignCoinsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemContract(ctx context.Context, in *QueryGetSystemContractRequest, opts ...grpc.CallOption) (*QueryGetSystemContractResponse, error) {
	out := new(QueryGetSystemContractResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Query/SystemContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasStabilityPoolAddress(ctx context.Context, in *QueryGetGasStabilityPoolAddress, opts ...grpc.CallOption) (*QueryGetGasStabilityPoolAddressResponse, error) {
	out := new(QueryGetGasStabilityPoolAddressResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Query/GasStabilityPoolAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasStabilityPoolBalance(ctx context.Context, in *QueryGetGasStabilityPoolBalance, opts ...grpc.CallOption) (*QueryGetGasStabilityPoolBalanceResponse, error) {
	out := new(QueryGetGasStabilityPoolBalanceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Query/GasStabilityPoolBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasStabilityPoolBalanceAll(ctx context.Context, in *QueryAllGasStabilityPoolBalance, opts ...grpc.CallOption) (*QueryAllGasStabilityPoolBalanceResponse, error) {
	out := new(QueryAllGasStabilityPoolBalanceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Query/GasStabilityPoolBalanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CodeHash(ctx context.Context, in *QueryCodeHashRequest, opts ...grpc.CallOption) (*QueryCodeHashResponse, error) {
	out := new(QueryCodeHashResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.fungible.Query/CodeHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a ForeignCoins by index.
	ForeignCoins(context.Context, *QueryGetForeignCoinsRequest) (*QueryGetForeignCoinsResponse, error)
	// Queries a list of ForeignCoins items.
	ForeignCoinsAll(context.Context, *QueryAllForeignCoinsRequest) (*QueryAllForeignCoinsResponse, error)
	// Queries SystemContract
	SystemContract(context.Context, *QueryGetSystemContractRequest) (*QueryGetSystemContractResponse, error)
	// Queries the address of a gas stability pool on a given chain.
	GasStabilityPoolAddress(context.Context, *QueryGetGasStabilityPoolAddress) (*QueryGetGasStabilityPoolAddressResponse, error)
	// Queries the balance of a gas stability pool on a given chain.
	GasStabilityPoolBalance(context.Context, *QueryGetGasStabilityPoolBalance) (*QueryGetGasStabilityPoolBalanceResponse, error)
	// Queries all gas stability pool balances.
	GasStabilityPoolBalanceAll(context.Context, *QueryAllGasStabilityPoolBalance) (*QueryAllGasStabilityPoolBalanceResponse, error)
	// Code hash query the code hash of a contract.
	CodeHash(context.Context, *QueryCodeHashRequest) (*QueryCodeHashResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ForeignCoins(ctx context.Context, req *QueryGetForeignCoinsRequest) (*QueryGetForeignCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForeignCoins not implemented")
}
func (*UnimplementedQueryServer) ForeignCoinsAll(ctx context.Context, req *QueryAllForeignCoinsRequest) (*QueryAllForeignCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForeignCoinsAll not implemented")
}
func (*UnimplementedQueryServer) SystemContract(ctx context.Context, req *QueryGetSystemContractRequest) (*QueryGetSystemContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemContract not implemented")
}
func (*UnimplementedQueryServer) GasStabilityPoolAddress(ctx context.Context, req *QueryGetGasStabilityPoolAddress) (*QueryGetGasStabilityPoolAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasStabilityPoolAddress not implemented")
}
func (*UnimplementedQueryServer) GasStabilityPoolBalance(ctx context.Context, req *QueryGetGasStabilityPoolBalance) (*QueryGetGasStabilityPoolBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasStabilityPoolBalance not implemented")
}
func (*UnimplementedQueryServer) GasStabilityPoolBalanceAll(ctx context.Context, req *QueryAllGasStabilityPoolBalance) (*QueryAllGasStabilityPoolBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasStabilityPoolBalanceAll not implemented")
}
func (*UnimplementedQueryServer) CodeHash(ctx context.Context, req *QueryCodeHashRequest) (*QueryCodeHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeHash not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ForeignCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetForeignCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ForeignCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Query/ForeignCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ForeignCoins(ctx, req.(*QueryGetForeignCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ForeignCoinsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllForeignCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ForeignCoinsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Query/ForeignCoinsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ForeignCoinsAll(ctx, req.(*QueryAllForeignCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSystemContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Query/SystemContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemContract(ctx, req.(*QueryGetSystemContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasStabilityPoolAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasStabilityPoolAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasStabilityPoolAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Query/GasStabilityPoolAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasStabilityPoolAddress(ctx, req.(*QueryGetGasStabilityPoolAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasStabilityPoolBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasStabilityPoolBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasStabilityPoolBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Query/GasStabilityPoolBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasStabilityPoolBalance(ctx, req.(*QueryGetGasStabilityPoolBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasStabilityPoolBalanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGasStabilityPoolBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasStabilityPoolBalanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Query/GasStabilityPoolBalanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasStabilityPoolBalanceAll(ctx, req.(*QueryAllGasStabilityPoolBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CodeHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCodeHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CodeHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.fungible.Query/CodeHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CodeHash(ctx, req.(*QueryCodeHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.fungible.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForeignCoins",
			Handler:    _Query_ForeignCoins_Handler,
		},
		{
			MethodName: "ForeignCoinsAll",
			Handler:    _Query_ForeignCoinsAll_Handler,
		},
		{
			MethodName: "SystemContract",
			Handler:    _Query_SystemContract_Handler,
		},
		{
			MethodName: "GasStabilityPoolAddress",
			Handler:    _Query_GasStabilityPoolAddress_Handler,
		},
		{
			MethodName: "GasStabilityPoolBalance",
			Handler:    _Query_GasStabilityPoolBalance_Handler,
		},
		{
			MethodName: "GasStabilityPoolBalanceAll",
			Handler:    _Query_GasStabilityPoolBalanceAll_Handler,
		},
		{
			MethodName: "CodeHash",
			Handler:    _Query_CodeHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetachain/zetacore/fungible/query.proto",
}

func (m *QueryGetForeignCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForeignCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForeignCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetForeignCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForeignCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForeignCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ForeignCoins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllForeignCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllForeignCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllForeignCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllForeignCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllForeignCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllForeignCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ForeignCoins) > 0 {
		for iNdEx := len(m.ForeignCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForeignCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SystemContract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetGasStabilityPoolAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasStabilityPoolAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasStabilityPoolAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetGasStabilityPoolAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasStabilityPoolAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasStabilityPoolAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosAddress) > 0 {
		i -= len(m.CosmosAddress)
		copy(dAtA[i:], m.CosmosAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasStabilityPoolBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasStabilityPoolBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasStabilityPoolBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasStabilityPoolBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasStabilityPoolBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasStabilityPoolBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasStabilityPoolBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasStabilityPoolBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasStabilityPoolBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllGasStabilityPoolBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasStabilityPoolBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasStabilityPoolBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCodeHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCodeHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCodeHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCodeHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCodeHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCodeHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetForeignCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetForeignCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ForeignCoins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllForeignCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllForeignCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ForeignCoins) > 0 {
		for _, e := range m.ForeignCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSystemContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSystemContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SystemContract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetGasStabilityPoolAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetGasStabilityPoolAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasStabilityPoolBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetGasStabilityPoolBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasStabilityPoolBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllGasStabilityPoolBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCodeHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCodeHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetForeignCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForeignCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForeignCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetForeignCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForeignCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForeignCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ForeignCoins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllForeignCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllForeignCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllForeignCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllForeignCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllForeignCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllForeignCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignCoins = append(m.ForeignCoins, ForeignCoins{})
			if err := m.ForeignCoins[len(m.ForeignCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SystemContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasStabilityPoolAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasStabilityPoolAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasStabilityPoolBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasStabilityPoolBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasStabilityPoolBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasStabilityPoolBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasStabilityPoolBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasStabilityPoolBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasStabilityPoolBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasStabilityPoolBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasStabilityPoolBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, QueryAllGasStabilityPoolBalanceResponse_Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasStabilityPoolBalanceResponse_Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCodeHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCodeHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCodeHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCodeHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCodeHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCodeHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
