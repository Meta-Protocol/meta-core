// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/block-vision/sui-go-sdk/models"
)

// SuiClient is an autogenerated mock type for the SuiClient type
type SuiClient struct {
	mock.Mock
}

// BatchTransaction provides a mock function with given fields: ctx, req
func (_m *SuiClient) BatchTransaction(ctx context.Context, req models.BatchTransactionRequest) (models.BatchTransactionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BatchTransaction")
	}

	var r0 models.BatchTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.BatchTransactionRequest) (models.BatchTransactionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.BatchTransactionRequest) models.BatchTransactionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.BatchTransactionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.BatchTransactionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeCoins provides a mock function with given fields: ctx, req
func (_m *SuiClient) MergeCoins(ctx context.Context, req models.MergeCoinsRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MergeCoins")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MergeCoinsRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.MergeCoinsRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.MergeCoinsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveCall provides a mock function with given fields: ctx, req
func (_m *SuiClient) MoveCall(ctx context.Context, req models.MoveCallRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MoveCall")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MoveCallRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.MoveCallRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.MoveCallRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pay provides a mock function with given fields: ctx, req
func (_m *SuiClient) Pay(ctx context.Context, req models.PayRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PayRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PayRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PayRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayAllSui provides a mock function with given fields: ctx, req
func (_m *SuiClient) PayAllSui(ctx context.Context, req models.PayAllSuiRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PayAllSui")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PayAllSuiRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PayAllSuiRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PayAllSuiRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaySui provides a mock function with given fields: ctx, req
func (_m *SuiClient) PaySui(ctx context.Context, req models.PaySuiRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PaySui")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PaySuiRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PaySuiRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PaySuiRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, req
func (_m *SuiClient) Publish(ctx context.Context, req models.PublishRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PublishRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PublishRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PublishRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestAddStake provides a mock function with given fields: ctx, req
func (_m *SuiClient) RequestAddStake(ctx context.Context, req models.AddStakeRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RequestAddStake")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddStakeRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AddStakeRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AddStakeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestWithdrawStake provides a mock function with given fields: ctx, req
func (_m *SuiClient) RequestWithdrawStake(ctx context.Context, req models.WithdrawStakeRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RequestWithdrawStake")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WithdrawStakeRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WithdrawStakeRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WithdrawStakeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignAndExecuteTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) SignAndExecuteTransactionBlock(ctx context.Context, req models.SignAndExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SignAndExecuteTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SignAndExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SignAndExecuteTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SignAndExecuteTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SplitCoin provides a mock function with given fields: ctx, req
func (_m *SuiClient) SplitCoin(ctx context.Context, req models.SplitCoinRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SplitCoin")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SplitCoinRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SplitCoinEqual provides a mock function with given fields: ctx, req
func (_m *SuiClient) SplitCoinEqual(ctx context.Context, req models.SplitCoinEqualRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SplitCoinEqual")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinEqualRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinEqualRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SplitCoinEqualRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiCall provides a mock function with given fields: ctx, method, params
func (_m *SuiClient) SuiCall(ctx context.Context, method string, params ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SuiCall")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (interface{}, error)); ok {
		return rf(ctx, method, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) interface{}); ok {
		r0 = rf(ctx, method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, method, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiDevInspectTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiDevInspectTransactionBlock(ctx context.Context, req models.SuiDevInspectTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiDevInspectTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiDryRunTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiDryRunTransactionBlock(ctx context.Context, req models.SuiDryRunTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiDryRunTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDryRunTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDryRunTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiDryRunTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiExecuteTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiExecuteTransactionBlock(ctx context.Context, req models.SuiExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiExecuteTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiExecuteTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiExecuteTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetChainIdentifier provides a mock function with given fields: ctx
func (_m *SuiClient) SuiGetChainIdentifier(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetChainIdentifier")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetCheckpoint provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetCheckpoint(ctx context.Context, req models.SuiGetCheckpointRequest) (models.CheckpointResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetCheckpoint")
	}

	var r0 models.CheckpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointRequest) (models.CheckpointResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointRequest) models.CheckpointResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.CheckpointResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetCheckpointRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetCheckpoints provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetCheckpoints(ctx context.Context, req models.SuiGetCheckpointsRequest) (models.PaginatedCheckpointsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetCheckpoints")
	}

	var r0 models.PaginatedCheckpointsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointsRequest) (models.PaginatedCheckpointsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointsRequest) models.PaginatedCheckpointsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedCheckpointsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetCheckpointsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetEvents provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetEvents(ctx context.Context, req models.SuiGetEventsRequest) (models.GetEventsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetEvents")
	}

	var r0 models.GetEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetEventsRequest) (models.GetEventsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetEventsRequest) models.GetEventsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.GetEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetEventsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetLatestCheckpointSequenceNumber provides a mock function with given fields: ctx
func (_m *SuiClient) SuiGetLatestCheckpointSequenceNumber(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetLatestCheckpointSequenceNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetLoadedChildObjects provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetLoadedChildObjects(ctx context.Context, req models.SuiGetLoadedChildObjectsRequest) (models.ChildObjectsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetLoadedChildObjects")
	}

	var r0 models.ChildObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetLoadedChildObjectsRequest) (models.ChildObjectsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetLoadedChildObjectsRequest) models.ChildObjectsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.ChildObjectsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetLoadedChildObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetMoveFunctionArgTypes provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetMoveFunctionArgTypes(ctx context.Context, req models.GetMoveFunctionArgTypesRequest) (models.GetMoveFunctionArgTypesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetMoveFunctionArgTypes")
	}

	var r0 models.GetMoveFunctionArgTypesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetMoveFunctionArgTypesRequest) (models.GetMoveFunctionArgTypesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetMoveFunctionArgTypesRequest) models.GetMoveFunctionArgTypesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.GetMoveFunctionArgTypesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetMoveFunctionArgTypesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetNormalizedMoveFunction provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetNormalizedMoveFunction(ctx context.Context, req models.GetNormalizedMoveFunctionRequest) (models.GetNormalizedMoveFunctionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveFunction")
	}

	var r0 models.GetNormalizedMoveFunctionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveFunctionRequest) (models.GetNormalizedMoveFunctionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveFunctionRequest) models.GetNormalizedMoveFunctionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.GetNormalizedMoveFunctionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveFunctionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetNormalizedMoveModule provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetNormalizedMoveModule(ctx context.Context, req models.GetNormalizedMoveModuleRequest) (models.GetNormalizedMoveModuleResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveModule")
	}

	var r0 models.GetNormalizedMoveModuleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModuleRequest) (models.GetNormalizedMoveModuleResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModuleRequest) models.GetNormalizedMoveModuleResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.GetNormalizedMoveModuleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveModuleRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetNormalizedMoveModulesByPackage provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetNormalizedMoveModulesByPackage(ctx context.Context, req models.GetNormalizedMoveModulesByPackageRequest) (models.GetNormalizedMoveModulesByPackageResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveModulesByPackage")
	}

	var r0 models.GetNormalizedMoveModulesByPackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModulesByPackageRequest) (models.GetNormalizedMoveModulesByPackageResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModulesByPackageRequest) models.GetNormalizedMoveModulesByPackageResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.GetNormalizedMoveModulesByPackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveModulesByPackageRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetNormalizedMoveStruct provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetNormalizedMoveStruct(ctx context.Context, req models.GetNormalizedMoveStructRequest) (models.GetNormalizedMoveStructResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveStruct")
	}

	var r0 models.GetNormalizedMoveStructResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveStructRequest) (models.GetNormalizedMoveStructResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveStructRequest) models.GetNormalizedMoveStructResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.GetNormalizedMoveStructResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveStructRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetObject provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetObject(ctx context.Context, req models.SuiGetObjectRequest) (models.SuiObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetObject")
	}

	var r0 models.SuiObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetObjectRequest) (models.SuiObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetObjectRequest) models.SuiObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiObjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetProtocolConfig provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetProtocolConfig(ctx context.Context, req models.SuiGetProtocolConfigRequest) (models.ProtocolConfigResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetProtocolConfig")
	}

	var r0 models.ProtocolConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetProtocolConfigRequest) (models.ProtocolConfigResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetProtocolConfigRequest) models.ProtocolConfigResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.ProtocolConfigResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetProtocolConfigRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetTotalTransactionBlocks provides a mock function with given fields: ctx
func (_m *SuiClient) SuiGetTotalTransactionBlocks(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetTotalTransactionBlocks")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetTransactionBlock(ctx context.Context, req models.SuiGetTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiMultiGetObjects provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiMultiGetObjects(ctx context.Context, req models.SuiMultiGetObjectsRequest) ([]*models.SuiObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiMultiGetObjects")
	}

	var r0 []*models.SuiObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetObjectsRequest) ([]*models.SuiObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetObjectsRequest) []*models.SuiObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SuiObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiMultiGetObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiMultiGetTransactionBlocks provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiMultiGetTransactionBlocks(ctx context.Context, req models.SuiMultiGetTransactionBlocksRequest) (models.SuiMultiGetTransactionBlocksResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiMultiGetTransactionBlocks")
	}

	var r0 models.SuiMultiGetTransactionBlocksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetTransactionBlocksRequest) (models.SuiMultiGetTransactionBlocksResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetTransactionBlocksRequest) models.SuiMultiGetTransactionBlocksResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.SuiMultiGetTransactionBlocksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiMultiGetTransactionBlocksRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiTryGetPastObject provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiTryGetPastObject(ctx context.Context, req models.SuiTryGetPastObjectRequest) (models.PastObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiTryGetPastObject")
	}

	var r0 models.PastObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryGetPastObjectRequest) (models.PastObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryGetPastObjectRequest) models.PastObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PastObjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiTryGetPastObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiTryMultiGetPastObjects provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiTryMultiGetPastObjects(ctx context.Context, req models.SuiTryMultiGetPastObjectsRequest) ([]*models.PastObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiTryMultiGetPastObjects")
	}

	var r0 []*models.PastObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryMultiGetPastObjectsRequest) ([]*models.PastObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryMultiGetPastObjectsRequest) []*models.PastObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PastObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiTryMultiGetPastObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetAllBalance provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetAllBalance(ctx context.Context, req models.SuiXGetAllBalanceRequest) (models.CoinAllBalanceResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetAllBalance")
	}

	var r0 models.CoinAllBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllBalanceRequest) (models.CoinAllBalanceResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllBalanceRequest) models.CoinAllBalanceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CoinAllBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetAllBalanceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetAllCoins provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetAllCoins(ctx context.Context, req models.SuiXGetAllCoinsRequest) (models.PaginatedCoinsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetAllCoins")
	}

	var r0 models.PaginatedCoinsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllCoinsRequest) (models.PaginatedCoinsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllCoinsRequest) models.PaginatedCoinsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedCoinsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetAllCoinsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetBalance provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetBalance(ctx context.Context, req models.SuiXGetBalanceRequest) (models.CoinBalanceResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetBalance")
	}

	var r0 models.CoinBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetBalanceRequest) (models.CoinBalanceResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetBalanceRequest) models.CoinBalanceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.CoinBalanceResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetBalanceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetCoinMetadata provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetCoinMetadata(ctx context.Context, req models.SuiXGetCoinMetadataRequest) (models.CoinMetadataResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCoinMetadata")
	}

	var r0 models.CoinMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinMetadataRequest) (models.CoinMetadataResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinMetadataRequest) models.CoinMetadataResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.CoinMetadataResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetCoinMetadataRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetCoins provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetCoins(ctx context.Context, req models.SuiXGetCoinsRequest) (models.PaginatedCoinsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCoins")
	}

	var r0 models.PaginatedCoinsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinsRequest) (models.PaginatedCoinsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinsRequest) models.PaginatedCoinsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedCoinsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetCoinsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetCommitteeInfo provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetCommitteeInfo(ctx context.Context, req models.SuiXGetCommitteeInfoRequest) (models.SuiXGetCommitteeInfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCommitteeInfo")
	}

	var r0 models.SuiXGetCommitteeInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCommitteeInfoRequest) (models.SuiXGetCommitteeInfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCommitteeInfoRequest) models.SuiXGetCommitteeInfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiXGetCommitteeInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetCommitteeInfoRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetCurrentEpoch provides a mock function with given fields: ctx
func (_m *SuiClient) SuiXGetCurrentEpoch(ctx context.Context) (models.EpochInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCurrentEpoch")
	}

	var r0 models.EpochInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.EpochInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.EpochInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.EpochInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetDynamicField provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetDynamicField(ctx context.Context, req models.SuiXGetDynamicFieldRequest) (models.PaginatedDynamicFieldInfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetDynamicField")
	}

	var r0 models.PaginatedDynamicFieldInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldRequest) (models.PaginatedDynamicFieldInfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldRequest) models.PaginatedDynamicFieldInfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedDynamicFieldInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetDynamicFieldRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetDynamicFieldObject provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetDynamicFieldObject(ctx context.Context, req models.SuiXGetDynamicFieldObjectRequest) (models.SuiObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetDynamicFieldObject")
	}

	var r0 models.SuiObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldObjectRequest) (models.SuiObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldObjectRequest) models.SuiObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiObjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetDynamicFieldObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetEpochs provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetEpochs(ctx context.Context, req models.SuiXGetEpochsRequest) (models.PaginatedEpochInfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetEpochs")
	}

	var r0 models.PaginatedEpochInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetEpochsRequest) (models.PaginatedEpochInfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetEpochsRequest) models.PaginatedEpochInfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedEpochInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetEpochsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetLatestSuiSystemState provides a mock function with given fields: ctx
func (_m *SuiClient) SuiXGetLatestSuiSystemState(ctx context.Context) (models.SuiSystemStateSummary, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetLatestSuiSystemState")
	}

	var r0 models.SuiSystemStateSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.SuiSystemStateSummary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.SuiSystemStateSummary); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.SuiSystemStateSummary)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetOwnedObjects provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetOwnedObjects(ctx context.Context, req models.SuiXGetOwnedObjectsRequest) (models.PaginatedObjectsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetOwnedObjects")
	}

	var r0 models.PaginatedObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetOwnedObjectsRequest) (models.PaginatedObjectsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetOwnedObjectsRequest) models.PaginatedObjectsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedObjectsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetOwnedObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetReferenceGasPrice provides a mock function with given fields: ctx
func (_m *SuiClient) SuiXGetReferenceGasPrice(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetReferenceGasPrice")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetStakes provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetStakes(ctx context.Context, req models.SuiXGetStakesRequest) ([]*models.DelegatedStakesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetStakes")
	}

	var r0 []*models.DelegatedStakesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesRequest) ([]*models.DelegatedStakesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesRequest) []*models.DelegatedStakesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DelegatedStakesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetStakesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetStakesByIds provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetStakesByIds(ctx context.Context, req models.SuiXGetStakesByIdsRequest) ([]*models.DelegatedStakesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetStakesByIds")
	}

	var r0 []*models.DelegatedStakesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesByIdsRequest) ([]*models.DelegatedStakesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesByIdsRequest) []*models.DelegatedStakesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DelegatedStakesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetStakesByIdsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetTotalSupply provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXGetTotalSupply(ctx context.Context, req models.SuiXGetTotalSupplyRequest) (models.TotalSupplyResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetTotalSupply")
	}

	var r0 models.TotalSupplyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetTotalSupplyRequest) (models.TotalSupplyResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetTotalSupplyRequest) models.TotalSupplyResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TotalSupplyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetTotalSupplyRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetValidatorsApy provides a mock function with given fields: ctx
func (_m *SuiClient) SuiXGetValidatorsApy(ctx context.Context) (models.ValidatorsApy, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetValidatorsApy")
	}

	var r0 models.ValidatorsApy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.ValidatorsApy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.ValidatorsApy); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.ValidatorsApy)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXQueryEvents provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXQueryEvents(ctx context.Context, req models.SuiXQueryEventsRequest) (models.PaginatedEventsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXQueryEvents")
	}

	var r0 models.PaginatedEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryEventsRequest) (models.PaginatedEventsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryEventsRequest) models.PaginatedEventsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedEventsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXQueryEventsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXQueryTransactionBlocks provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXQueryTransactionBlocks(ctx context.Context, req models.SuiXQueryTransactionBlocksRequest) (models.SuiXQueryTransactionBlocksResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXQueryTransactionBlocks")
	}

	var r0 models.SuiXQueryTransactionBlocksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryTransactionBlocksRequest) (models.SuiXQueryTransactionBlocksResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryTransactionBlocksRequest) models.SuiXQueryTransactionBlocksResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiXQueryTransactionBlocksResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXQueryTransactionBlocksRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXResolveNameServiceAddress provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXResolveNameServiceAddress(ctx context.Context, req models.SuiXResolveNameServiceAddressRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXResolveNameServiceAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceAddressRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceAddressRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXResolveNameServiceAddressRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXResolveNameServiceNames provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXResolveNameServiceNames(ctx context.Context, req models.SuiXResolveNameServiceNamesRequest) (models.SuiXResolveNameServiceNamesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXResolveNameServiceNames")
	}

	var r0 models.SuiXResolveNameServiceNamesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceNamesRequest) (models.SuiXResolveNameServiceNamesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceNamesRequest) models.SuiXResolveNameServiceNamesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiXResolveNameServiceNamesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXResolveNameServiceNamesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferObject provides a mock function with given fields: ctx, req
func (_m *SuiClient) TransferObject(ctx context.Context, req models.TransferObjectRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TransferObject")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferObjectRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferObjectRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TransferObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferSui provides a mock function with given fields: ctx, req
func (_m *SuiClient) TransferSui(ctx context.Context, req models.TransferSuiRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TransferSui")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferSuiRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferSuiRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TransferSuiRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSuiClient creates a new instance of SuiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSuiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SuiClient {
	mock := &SuiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
