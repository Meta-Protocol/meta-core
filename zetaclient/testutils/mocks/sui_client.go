// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/block-vision/sui-go-sdk/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SUIClient is an autogenerated mock type for the client type
type SUIClient struct {
	mock.Mock
}

// GetLatestCheckpoint provides a mock function with given fields: ctx
func (_m *SUIClient) GetLatestCheckpoint(ctx context.Context) (models.CheckpointResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCheckpoint")
	}

	var r0 models.CheckpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.CheckpointResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.CheckpointResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.CheckpointResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *SUIClient) HealthCheck(ctx context.Context) (time.Time, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetReferenceGasPrice provides a mock function with given fields: ctx
func (_m *SUIClient) SuiXGetReferenceGasPrice(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetReferenceGasPrice")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSUIClient creates a new instance of SUIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSUIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SUIClient {
	mock := &SUIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
