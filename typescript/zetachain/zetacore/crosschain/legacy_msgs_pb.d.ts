// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file zetachain/zetacore/crosschain/legacy_msgs.proto (package zetachain.zetacore.crosschain, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Proof } from "../pkg/proofs/proofs_pb.js";
import type { CoinType } from "../pkg/coin/coin_pb.js";
import type { ReceiveStatus } from "../pkg/chains/chains_pb.js";

/**
 * legacy MsgAddOutboundTracker
 * defined to keep codec compatibility
 *
 * @generated from message zetachain.zetacore.crosschain.MsgAddToOutTxTracker
 */
export declare class MsgAddToOutTxTracker extends Message<MsgAddToOutTxTracker> {
  /**
   * @generated from field: string creator = 1;
   */
  creator: string;

  /**
   * @generated from field: int64 chain_id = 2;
   */
  chainId: bigint;

  /**
   * @generated from field: uint64 nonce = 3;
   */
  nonce: bigint;

  /**
   * @generated from field: string tx_hash = 4;
   */
  txHash: string;

  /**
   * @generated from field: zetachain.zetacore.pkg.proofs.Proof proof = 5;
   */
  proof?: Proof;

  /**
   * @generated from field: string block_hash = 6;
   */
  blockHash: string;

  /**
   * @generated from field: int64 tx_index = 7;
   */
  txIndex: bigint;

  constructor(data?: PartialMessage<MsgAddToOutTxTracker>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.MsgAddToOutTxTracker";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddToOutTxTracker;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddToOutTxTracker;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddToOutTxTracker;

  static equals(a: MsgAddToOutTxTracker | PlainMessage<MsgAddToOutTxTracker> | undefined, b: MsgAddToOutTxTracker | PlainMessage<MsgAddToOutTxTracker> | undefined): boolean;
}

/**
 * legacy MsgAddInboundTracker
 * defined to keep codec compatibility
 *
 * @generated from message zetachain.zetacore.crosschain.MsgAddToInTxTracker
 */
export declare class MsgAddToInTxTracker extends Message<MsgAddToInTxTracker> {
  /**
   * @generated from field: string creator = 1;
   */
  creator: string;

  /**
   * @generated from field: int64 chain_id = 2;
   */
  chainId: bigint;

  /**
   * @generated from field: string tx_hash = 3;
   */
  txHash: string;

  /**
   * @generated from field: zetachain.zetacore.pkg.coin.CoinType coin_type = 4;
   */
  coinType: CoinType;

  /**
   * @generated from field: zetachain.zetacore.pkg.proofs.Proof proof = 5;
   */
  proof?: Proof;

  /**
   * @generated from field: string block_hash = 6;
   */
  blockHash: string;

  /**
   * @generated from field: int64 tx_index = 7;
   */
  txIndex: bigint;

  constructor(data?: PartialMessage<MsgAddToInTxTracker>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.MsgAddToInTxTracker";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddToInTxTracker;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddToInTxTracker;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddToInTxTracker;

  static equals(a: MsgAddToInTxTracker | PlainMessage<MsgAddToInTxTracker> | undefined, b: MsgAddToInTxTracker | PlainMessage<MsgAddToInTxTracker> | undefined): boolean;
}

/**
 * legacy MsgRemoveOutboundTracker
 * defined to keep codec compatibility
 *
 * @generated from message zetachain.zetacore.crosschain.MsgRemoveFromOutTxTracker
 */
export declare class MsgRemoveFromOutTxTracker extends Message<MsgRemoveFromOutTxTracker> {
  /**
   * @generated from field: string creator = 1;
   */
  creator: string;

  /**
   * @generated from field: int64 chain_id = 2;
   */
  chainId: bigint;

  /**
   * @generated from field: uint64 nonce = 3;
   */
  nonce: bigint;

  constructor(data?: PartialMessage<MsgRemoveFromOutTxTracker>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.MsgRemoveFromOutTxTracker";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveFromOutTxTracker;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveFromOutTxTracker;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveFromOutTxTracker;

  static equals(a: MsgRemoveFromOutTxTracker | PlainMessage<MsgRemoveFromOutTxTracker> | undefined, b: MsgRemoveFromOutTxTracker | PlainMessage<MsgRemoveFromOutTxTracker> | undefined): boolean;
}

/**
 * legacy MsgVoteOutbound
 * defined to keep codec compatibility
 *
 * @generated from message zetachain.zetacore.crosschain.MsgVoteOnObservedOutboundTx
 */
export declare class MsgVoteOnObservedOutboundTx extends Message<MsgVoteOnObservedOutboundTx> {
  /**
   * @generated from field: string creator = 1;
   */
  creator: string;

  /**
   * @generated from field: string cctx_hash = 2;
   */
  cctxHash: string;

  /**
   * @generated from field: string observed_outTx_hash = 3;
   */
  observedOutTxHash: string;

  /**
   * @generated from field: uint64 observed_outTx_blockHeight = 4;
   */
  observedOutTxBlockHeight: bigint;

  /**
   * @generated from field: uint64 observed_outTx_gas_used = 10;
   */
  observedOutTxGasUsed: bigint;

  /**
   * @generated from field: string observed_outTx_effective_gas_price = 11;
   */
  observedOutTxEffectiveGasPrice: string;

  /**
   * @generated from field: uint64 observed_outTx_effective_gas_limit = 12;
   */
  observedOutTxEffectiveGasLimit: bigint;

  /**
   * @generated from field: string value_received = 5;
   */
  valueReceived: string;

  /**
   * @generated from field: zetachain.zetacore.pkg.chains.ReceiveStatus status = 6;
   */
  status: ReceiveStatus;

  /**
   * @generated from field: int64 outTx_chain = 7;
   */
  outTxChain: bigint;

  /**
   * @generated from field: uint64 outTx_tss_nonce = 8;
   */
  outTxTssNonce: bigint;

  /**
   * @generated from field: zetachain.zetacore.pkg.coin.CoinType coin_type = 9;
   */
  coinType: CoinType;

  constructor(data?: PartialMessage<MsgVoteOnObservedOutboundTx>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.MsgVoteOnObservedOutboundTx";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVoteOnObservedOutboundTx;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVoteOnObservedOutboundTx;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVoteOnObservedOutboundTx;

  static equals(a: MsgVoteOnObservedOutboundTx | PlainMessage<MsgVoteOnObservedOutboundTx> | undefined, b: MsgVoteOnObservedOutboundTx | PlainMessage<MsgVoteOnObservedOutboundTx> | undefined): boolean;
}

/**
 * legacy MsgVoteInbound
 * defined to keep codec compatibility
 *
 * @generated from message zetachain.zetacore.crosschain.MsgVoteOnObservedInboundTx
 */
export declare class MsgVoteOnObservedInboundTx extends Message<MsgVoteOnObservedInboundTx> {
  /**
   * @generated from field: string creator = 1;
   */
  creator: string;

  /**
   * @generated from field: string sender = 2;
   */
  sender: string;

  /**
   * @generated from field: int64 sender_chain_id = 3;
   */
  senderChainId: bigint;

  /**
   * @generated from field: string receiver = 4;
   */
  receiver: string;

  /**
   * @generated from field: int64 receiver_chain = 5;
   */
  receiverChain: bigint;

  /**
   *  string zeta_burnt = 6;
   *
   * @generated from field: string amount = 6;
   */
  amount: string;

  /**
   *  string mMint = 7;
   *
   * @generated from field: string message = 8;
   */
  message: string;

  /**
   * @generated from field: string in_tx_hash = 9;
   */
  inTxHash: string;

  /**
   * @generated from field: uint64 in_block_height = 10;
   */
  inBlockHeight: bigint;

  /**
   * @generated from field: uint64 gas_limit = 11;
   */
  gasLimit: bigint;

  /**
   * @generated from field: zetachain.zetacore.pkg.coin.CoinType coin_type = 12;
   */
  coinType: CoinType;

  /**
   * @generated from field: string tx_origin = 13;
   */
  txOrigin: string;

  /**
   * @generated from field: string asset = 14;
   */
  asset: string;

  /**
   * event index of the sent asset in the observed tx
   *
   * @generated from field: uint64 event_index = 15;
   */
  eventIndex: bigint;

  constructor(data?: PartialMessage<MsgVoteOnObservedInboundTx>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.MsgVoteOnObservedInboundTx";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVoteOnObservedInboundTx;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVoteOnObservedInboundTx;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVoteOnObservedInboundTx;

  static equals(a: MsgVoteOnObservedInboundTx | PlainMessage<MsgVoteOnObservedInboundTx> | undefined, b: MsgVoteOnObservedInboundTx | PlainMessage<MsgVoteOnObservedInboundTx> | undefined): boolean;
}

